<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oduesp</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-29T14:31:24.316Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Oduesp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Konjak Record——2019.05.29</title>
    <link href="http://yoursite.com/2019/05/29/Algorithm0529/"/>
    <id>http://yoursite.com/2019/05/29/Algorithm0529/</id>
    <published>2019-05-29T14:09:24.747Z</published>
    <updated>2019-05-29T14:31:24.316Z</updated>
    
    <content type="html"><![CDATA[<h3 id="P3558-POI2013-BAJ-Bytecomputer"><a href="#P3558-POI2013-BAJ-Bytecomputer" class="headerlink" title="P3558 [POI2013]BAJ-Bytecomputer"></a><a href="https://www.luogu.org/problemnew/show/P3558" target="_blank" rel="noopener">P3558 [POI2013]BAJ-Bytecomputer</a></h3><p>R：f[i][0]表示第i个数以-1结尾的最小修正次数，f[i][1],f[i][2]类似,然后分类讨论a[i]的情况</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">3</span>], arr[maxn], N;</span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!isdigit(c)) {</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = -<span class="number">1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (isdigit(c)) {</span><br><span class="line">        r = <span class="number">10</span> * r + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f * r;</span><br><span class="line">}</span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{ <span class="keyword">return</span> a < b ? a : b; }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    N = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        arr[i] = read();</span><br><span class="line">    }</span><br><span class="line">    memset(f, <span class="number">0x3f</span>, sizeof(f));</span><br><span class="line">    f[<span class="number">1</span>][arr[<span class="number">1</span>] + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == -<span class="number">1</span>) {</span><br><span class="line">            f[i][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//f[i][1] = f[i - 1][2] + 1;不能转移，因为需要前一个是1，而当前是0，这违背了单调性</span></span><br><span class="line">            f[i][<span class="number">2</span>] = f[i - <span class="number">1</span>][<span class="number">2</span>] + <span class="number">2</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] == <span class="number">0</span>) {</span><br><span class="line">            f[i][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">            f[i][<span class="number">1</span>] = min(f[i - <span class="number">1</span>][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">            f[i][<span class="number">2</span>] = f[i - <span class="number">1</span>][<span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            f[i][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">2</span>;</span><br><span class="line">            f[i][<span class="number">1</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">            f[i][<span class="number">2</span>] = min(f[i - <span class="number">1</span>][<span class="number">0</span>], min(f[i - <span class="number">1</span>][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">2</span>]));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = min(min(f[N][<span class="number">0</span>], f[N][<span class="number">1</span>]), f[N][<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span> (ans == f[<span class="number">0</span>][<span class="number">0</span>]) {</span><br><span class="line">        printf(<span class="string">"BRAK\n"</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        printf(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2300-合并神犇"><a href="#P2300-合并神犇" class="headerlink" title="P2300 合并神犇"></a><a href="https://www.luogu.org/problemnew/show/P2300" target="_blank" rel="noopener">P2300 合并神犇</a></h3><p>R:f[i] = min(f[j]+i-j-1)，根据转移方程很容易让人想到使用单调队列维护f[j]-j，但是需要有<br>sum[i]-sum[j] >= pre[j]使得f[j]-j不好维护，容易证明选择满足条件的最大j为最佳转移点，详见代码注释</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include <algorithm></span><br><span class="line">#include <cstdio></span><br><span class="line">#include <cstring></span><br><span class="line">#define int long long</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn], N, Q[maxn], f[maxn], g[maxn], head = <span class="number">1</span>, tail = <span class="number">0</span>, sum[maxn];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * f[i] = f[j] + i - 1 - j(j为满足sum[i]-sum[j]>=g[j]的最大j)</span></span><br><span class="line"><span class="comment"> * 证明：i+1，f[i+1]比f[i]最多+1，但是i-1-j时却是实实在在的多一个1</span></span><br><span class="line"><span class="comment"> * 令h[j] = sum[j] + g[j]，维护一个单调增加队列</span></span><br><span class="line"><span class="comment"> * 如果新来一个h[j]>=尾部，则直接添加，反之删除尾部，不用担心删除合理的解，因为如果它能删除</span></span><br><span class="line"><span class="comment"> * 说明它更合理，因为j更大而且h[j]更小，后续sum是单增的。</span></span><br><span class="line"><span class="comment"> * 注意需要删除头部过期数据，因为需要找一个满足条件且j更靠后的。</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="function">signed <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    scanf(<span class="string">"%lld"</span>, &N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++)</span><br><span class="line">        scanf(<span class="string">"%lld"</span>, &p[i]), sum[i] = sum[i - <span class="number">1</span>] + p[i];</span><br><span class="line">    Q[++tail] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">while</span> (head + <span class="number">1</span> <= tail && sum[i] >= g[Q[head + <span class="number">1</span>]] + sum[Q[head + <span class="number">1</span>]]) {</span><br><span class="line">            head++;</span><br><span class="line">        }</span><br><span class="line">        f[i] = f[Q[head]] + i - Q[head] - <span class="number">1</span>;</span><br><span class="line">        g[i] = sum[i] - sum[Q[head]];</span><br><span class="line">        <span class="keyword">while</span> (head <= tail && sum[Q[tail]] + g[Q[tail]] >= sum[i] + g[i]) {</span><br><span class="line">            tail--;</span><br><span class="line">        }</span><br><span class="line">        Q[++tail] = i;</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"%lld\n"</span>, f[N]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P4302-SCOI2003-字符串折叠"><a href="#P4302-SCOI2003-字符串折叠" class="headerlink" title="P4302 [SCOI2003]字符串折叠"></a><a href="https://www.luogu.org/problemnew/show/P4302" target="_blank" rel="noopener">P4302 [SCOI2003]字符串折叠</a></h3><p>R：区间dp</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include <algorithm></span><br><span class="line">#include <cstdio></span><br><span class="line">#include <cstring></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意循环节内包含循环节的情况</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">105</span>][<span class="number">105</span>], len, cycle[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{ <span class="keyword">return</span> a < b ? a : b; }</span><br><span class="line"></span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e, <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> q = e - s + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (q % l)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s; i + l <= e; i++) {</span><br><span class="line">        <span class="keyword">if</span> (str[i] != str[i + l])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    scanf(<span class="string">"%s"</span>, &str[<span class="number">1</span>]);</span><br><span class="line">    len = strlen(&str[<span class="number">1</span>]);</span><br><span class="line">    memset(f, <span class="number">0x3f</span>, sizeof(f)), memset(cycle, <span class="number">0x3f</span>, sizeof(cycle));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= len; i++) {</span><br><span class="line">        f[i][i] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= len; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s <= len; s++) {</span><br><span class="line">            <span class="keyword">int</span> e = s + i;</span><br><span class="line">            <span class="keyword">if</span> (e > len) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            f[s][e] = e - s + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = s; k < e; k++) {</span><br><span class="line">                f[s][e] = min(f[s][e], f[s][k] + f[k + <span class="number">1</span>][e]);</span><br><span class="line">                <span class="comment">//每个循环节的长度为k-s+1,共有(e-s+1)/(k-s+1)个</span></span><br><span class="line">                <span class="keyword">if</span> (check(s, e, k - s + <span class="number">1</span>)) {</span><br><span class="line">                    f[s][e] = min(f[s][e], f[s][k] + <span class="number">2</span> + ((e - s + <span class="number">1</span>) / (k - s + <span class="number">1</span>) < <span class="number">10</span> ? <span class="number">1</span> : <span class="number">2</span>));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"%d\n"</span>, f[<span class="number">1</span>][len]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P4158-SCOI2009-粉刷匠"><a href="#P4158-SCOI2009-粉刷匠" class="headerlink" title="P4158 [SCOI2009]粉刷匠"></a><a href="https://www.luogu.org/problemnew/show/P4158" target="_blank" rel="noopener">P4158 [SCOI2009]粉刷匠</a></h3><p>R:区间dp</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是我第一道1A的省选题，思路是先对每条木板做一次区间dp</span></span><br><span class="line"><span class="comment"> * 然后再对所有木板做一次多重背包</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">int</span> N, M, T, cost[<span class="number">55</span>][<span class="number">55</span>], chess[<span class="number">55</span>][<span class="number">55</span>], sum[<span class="number">55</span>][<span class="number">55</span>], dp[<span class="number">55</span>][<span class="number">55</span>], f[<span class="number">2505</span>];</span><br><span class="line"><span class="keyword">char</span> tmp[<span class="number">55</span>];</span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{ <span class="keyword">return</span> a > b ? a : b; }</span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{ <span class="keyword">return</span> a < b ? a : b; }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    scanf(<span class="string">"%d %d %d"</span>, &N, &M, &T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        scanf(<span class="string">"%s"</span>, &tmp[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            chess[i][j] = tmp[j] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="comment">//统计前缀中1的个数</span></span><br><span class="line">            <span class="keyword">if</span> (chess[i][j] == <span class="number">1</span>) {</span><br><span class="line">                sum[i][j] = sum[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                sum[i][j] = sum[i][j - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        memset(cost, ~<span class="number">0x3f</span>, sizeof(cost));</span><br><span class="line">        <span class="comment">//cost表示前j个涂k次且第j个正确涂色的最大数量</span></span><br><span class="line">        cost[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= j; k++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m < j; m++) {</span><br><span class="line">                    <span class="keyword">if</span> (m < k - <span class="number">1</span>) {</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">int</span> right = chess[i][j] ? sum[i][j] - sum[i][m]</span><br><span class="line">                                            : (j - m + sum[i][m] - sum[i][j]);</span><br><span class="line">                    cost[j][k] = max(cost[j][k], cost[m][k - <span class="number">1</span>] + right);</span><br><span class="line">                }</span><br><span class="line">                dp[i][k] = max(dp[i][k], cost[j][k]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = T; j >= <span class="number">1</span>; j--) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = min(M, j); k >= <span class="number">0</span>; k--) {</span><br><span class="line">                f[j] = max(f[j - k] + dp[i][k], f[j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"%d\n"</span>, f[T]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="难题"><a href="#难题" class="headerlink" title="难题"></a>难题</h2><h3 id="P2757-国家集训队-等差子序列"><a href="#P2757-国家集训队-等差子序列" class="headerlink" title="P2757 [国家集训队]等差子序列"></a><a href="https://www.luogu.org/problemnew/show/P2757" target="_blank" rel="noopener">P2757 [国家集训队]等差子序列</a></h3><p>R:很重要很好的题目，使用了线段树维护正反hash</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这道题可以用暴力解决，也可以用线段树</span></span><br><span class="line"><span class="comment"> * aj - ai = ak - aj</span></span><br><span class="line"><span class="comment"> * aj*2 = ai + ak(i<j<k)</span></span><br><span class="line"><span class="comment"> * 枚举aj,如果aj，如果visited[aj+x]=visited[aj-x]，即aj前后回文，说明不可能构成</span></span><br><span class="line"><span class="comment"> * 等差数列，所以问题转换成一个维护正反hash的过程，可以用线段树来维护。</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line">#define ll long long</span><br><span class="line">#define mod INT_MAX</span><br><span class="line">#define maxn 10010</span><br><span class="line">#define seed 233</span><br><span class="line">ll tree[maxn << <span class="number">2</span>][<span class="number">2</span>], base[maxn], N, arr[maxn], T;</span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{ <span class="keyword">return</span> a < b ? a : b; }</span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{ <span class="keyword">return</span> a > b ? a : b; }</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    base[<span class="number">1</span>] = seed;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j < maxn; j++) {</span><br><span class="line">        base[j] = (base[j - <span class="number">1</span>] * seed) % mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l == r) {</span><br><span class="line">        tree[cur][<span class="number">0</span>] = tree[cur][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos <= mid) {</span><br><span class="line">        update(pos, l, mid, cur << <span class="number">1</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        update(pos, mid + <span class="number">1</span>, r, cur << <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    tree[cur][<span class="number">0</span>] = (tree[cur << <span class="number">1</span>][<span class="number">0</span>] * base[r - mid] + tree[cur << <span class="number">1</span> | <span class="number">1</span>][<span class="number">0</span>]) % mod;</span><br><span class="line">    tree[cur][<span class="number">1</span>] = (tree[cur << <span class="number">1</span> | <span class="number">1</span>][<span class="number">1</span>] * base[mid - l + <span class="number">1</span>] + tree[cur << <span class="number">1</span>][<span class="number">1</span>]) % mod;</span><br><span class="line">}</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> cur, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l >= L && r <= R) {</span><br><span class="line">        <span class="keyword">return</span> tree[cur][d];</span><br><span class="line">    }</span><br><span class="line">    ll mid = (l + r) >> <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid < L) {</span><br><span class="line">        <span class="keyword">return</span> query(mid + <span class="number">1</span>, r, L, R, cur << <span class="number">1</span> | <span class="number">1</span>, d);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (mid >= R) {</span><br><span class="line">        <span class="keyword">return</span> query(l, mid, L, R, cur << <span class="number">1</span>, d);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="number">0</span>) {</span><br><span class="line">        ans = (query(l, mid, L, R, cur << <span class="number">1</span>, d) * base[min(R, r) - mid]) % mod;</span><br><span class="line">        ans = (ans + query(mid + <span class="number">1</span>, r, L, R, cur << <span class="number">1</span> | <span class="number">1</span>, d)) % mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        ans = (query(mid + <span class="number">1</span>, r, L, R, cur << <span class="number">1</span> | <span class="number">1</span>, d) * base[mid - max(l, L) + <span class="number">1</span>]) % mod;</span><br><span class="line">        ans = (ans + query(l, mid, L, R, cur << <span class="number">1</span>, d)) % mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    init();</span><br><span class="line">    scanf(<span class="string">"%lld"</span>, &T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        memset(tree, <span class="number">0</span>, sizeof(tree));</span><br><span class="line">        scanf(<span class="string">"%lld"</span>, &N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">            scanf(<span class="string">"%lld"</span>, &arr[i]);</span><br><span class="line">        }</span><br><span class="line">        bool flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N && !flag; i++) {</span><br><span class="line">            <span class="keyword">int</span> len = min(N - arr[i], arr[i] - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (len != <span class="number">0</span>) {</span><br><span class="line">                ll f1 = query(<span class="number">1</span>, N, arr[i] - len, arr[i] - <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                ll f2 = query(<span class="number">1</span>, N, arr[i] + <span class="number">1</span>, arr[i] + len, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (f1 != f2) {</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            update(arr[i], <span class="number">1</span>, N, <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        puts(flag ? <span class="string">"Y"</span> : <span class="string">"N"</span>);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P3413-SAC-1-萌数"><a href="#P3413-SAC-1-萌数" class="headerlink" title="P3413 SAC#1 - 萌数"></a><a href="https://www.luogu.org/problemnew/show/P3413" target="_blank" rel="noopener">P3413 SAC#1 - 萌数</a></h3><p>R:数位dp,据说是入门题，但我是第一次做这类题</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include <algorithm></span><br><span class="line">#include <cstdio></span><br><span class="line">#include <cstring></span><br><span class="line">#define ll long long</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">char</span> s1[maxn], s2[maxn];</span><br><span class="line">ll n[maxn], len, f[maxn][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * f[i][j][k]表示pos位置，前一个数是j,前前个数字是k的方案数</span></span><br><span class="line"><span class="comment"> * 如果r=21913，枚举到119?时会记录一个状态f[4][9][1],此时?可以选0-9</span></span><br><span class="line"><span class="comment"> * 当枚举到219?时这个状态是不能使用的，?需要<=1,这就是limit变量的作用</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> pre, <span class="keyword">int</span> gre, bool limit, bool zero)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!limit && !zero && pre != -<span class="number">1</span> && gre != -<span class="number">1</span> && f[pos][pre][gre] != -<span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> f[pos][pre][gre];</span><br><span class="line">    }</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    ll up = limit ? n[pos] : <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= up; i++) {</span><br><span class="line">        <span class="keyword">if</span> (i != pre && i != gre && !zero) {</span><br><span class="line">            ans = (ans + dfs(pos - <span class="number">1</span>, i, pre, limit && i == n[pos], zero && i == <span class="number">0</span>)) % mod;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (zero) {</span><br><span class="line">            ans = (ans + dfs(pos - <span class="number">1</span>, (i == <span class="number">0</span> && zero) ? -<span class="number">1</span> : i, -<span class="number">1</span>, limit && i == n[pos], zero && i == <span class="number">0</span>)) % mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!limit && !zero && pre != -<span class="number">1</span> && gre != -<span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> f[pos][pre][gre] = ans;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    memset(f, -<span class="number">1</span>, sizeof(f));</span><br><span class="line">    len = strlen(&s2[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= len; i++) {</span><br><span class="line">        n[len - i + <span class="number">1</span>] = s2[i] - <span class="string">'0'</span>;</span><br><span class="line">    }</span><br><span class="line">    ll ans2 = dfs(len, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    len = strlen(&s1[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= len; i++) {</span><br><span class="line">        n[len - i + <span class="number">1</span>] = s1[i] - <span class="string">'0'</span>;</span><br><span class="line">    }</span><br><span class="line">    ll ans1 = dfs(len, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    ans1--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i <= len; i++) {</span><br><span class="line">        <span class="keyword">if</span> (n[i] == n[i - <span class="number">1</span>] || (n[i] == n[i - <span class="number">2</span>] && i - <span class="number">2</span> >= <span class="number">1</span>)) {</span><br><span class="line">            ans1++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> (ans2 - ans1 + mod) % mod;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    scanf(<span class="string">"%s %s"</span>, &s1[<span class="number">1</span>], &s2[<span class="number">1</span>]);</span><br><span class="line">    ll numr = <span class="number">0</span>, numl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= strlen(&s2[<span class="number">1</span>]); i++) {</span><br><span class="line">        numr = ((numr * <span class="number">10</span>) % mod + s2[i] - <span class="string">'0'</span>) % mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= strlen(&s1[<span class="number">1</span>]); i++) {</span><br><span class="line">        numl = ((numl * <span class="number">10</span>) % mod + s1[i] - <span class="string">'0'</span>) % mod;</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"%lld\n"</span>, ((numr - numl + <span class="number">1</span> - solve()) % mod + mod) % mod);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2051-AHOI2009-中国象棋"><a href="#P2051-AHOI2009-中国象棋" class="headerlink" title="P2051 [AHOI2009]中国象棋"></a><a href="https://www.luogu.org/problemnew/show/P2051" target="_blank" rel="noopener">P2051 [AHOI2009]中国象棋</a></h3><p>R:思维题，转移方程很清奇</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line">#define mod 9999973</span><br><span class="line">#define maxn 105</span><br><span class="line">#define int long long</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn][maxn], M, N;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每列最多放置两个炮,f[i][j][k]表示前i行中，j列放置一个炮，k列放置两个炮的方案数</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{ <span class="keyword">return</span> (num * (num - <span class="number">1</span>) / <span class="number">2</span>) % mod; }</span><br><span class="line"><span class="function">signed <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    scanf(<span class="string">"%lld %lld"</span>, &N, &M);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k + j <= M; k++) {</span><br><span class="line">                <span class="comment">//一个不放</span></span><br><span class="line">                f[i][j][k] = f[i - <span class="number">1</span>][j][k];</span><br><span class="line">                <span class="comment">//放一个在没有棋子的列</span></span><br><span class="line">                <span class="keyword">if</span> (j >= <span class="number">1</span>)</span><br><span class="line">                    f[i][j][k] = (f[i][j][k] + (M - j - k + <span class="number">1</span>) * f[i - <span class="number">1</span>][j - <span class="number">1</span>][k]) % mod;</span><br><span class="line">                <span class="comment">//放一个在有一个棋子的列</span></span><br><span class="line">                <span class="keyword">if</span> (k >= <span class="number">1</span>)</span><br><span class="line">                    f[i][j][k] = (f[i][j][k] + (j + <span class="number">1</span>) * f[i - <span class="number">1</span>][j + <span class="number">1</span>][k - <span class="number">1</span>]) % mod;</span><br><span class="line">                <span class="comment">//放两个棋子，都放在没有放置棋子的列</span></span><br><span class="line">                <span class="keyword">if</span> (j >= <span class="number">2</span>)</span><br><span class="line">                    f[i][j][k] = (f[i][j][k] + f[i - <span class="number">1</span>][j - <span class="number">2</span>][k] * C(M - j - k + <span class="number">2</span>)) % mod;</span><br><span class="line">                <span class="comment">//放两个棋子，一个</span></span><br><span class="line">                <span class="keyword">if</span> (k >= <span class="number">1</span>)</span><br><span class="line">                    f[i][j][k] = (f[i][j][k] + f[i - <span class="number">1</span>][j][k - <span class="number">1</span>] * (j) * (M - j + <span class="number">1</span> - k)) % mod;</span><br><span class="line">                <span class="comment">//放置两个棋子，两列均有各有一个棋子</span></span><br><span class="line">                <span class="keyword">if</span> (k >= <span class="number">2</span>)</span><br><span class="line">                    f[i][j][k] = (f[i][j][k] + f[i - <span class="number">1</span>][j + <span class="number">2</span>][k - <span class="number">2</span>] * C(j + <span class="number">2</span>)) % mod;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= M; j++) {</span><br><span class="line">            ans = (ans + f[N][i][j]) % mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2405-non天平"><a href="#P2405-non天平" class="headerlink" title="P2405 non天平"></a><a href="https://www.luogu.org/problemnew/show/P2405" target="_blank" rel="noopener">P2405 non天平</a></h3><p>R:思维题，本质是进制转换后进行数位dp,使用了JAVA高精度（我不会写高精）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 这道题是数位dp,f[i+1][1]表示将第i+1位凑成10，那么</span></span><br><span class="line"><span class="comment"> * f[i][0/1]额外对这个1进行处理，f[i+1][0] 表示不凑成10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P2405</span> </span>{</span><br><span class="line">    <span class="comment">//初始化为0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mod = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100005</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100005</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a > b ? b : a;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        BigInteger num = <span class="keyword">new</span> BigInteger(scanner.next());</span><br><span class="line">        BigInteger divided = <span class="keyword">new</span> BigInteger(scanner.next());</span><br><span class="line">        BigInteger zero = <span class="keyword">new</span> BigInteger(<span class="string">"0"</span>);</span><br><span class="line">        BigInteger one = <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">int</span> n = divided.intValue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (divided.equals(one)) {</span><br><span class="line">            System.out.println(num);</span><br><span class="line">            scanner.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!num.equals(zero)) {</span><br><span class="line">            mod[++tot] = num.mod(divided).intValue();</span><br><span class="line">            num = num.divide(divided);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        f[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= tot; i++) {</span><br><span class="line">            f[i][<span class="number">0</span>] = min(f[i - <span class="number">1</span>][<span class="number">0</span>] + mod[i], f[i - <span class="number">1</span>][<span class="number">1</span>] + mod[i] + <span class="number">1</span>);</span><br><span class="line">            f[i][<span class="number">1</span>] = min(f[i - <span class="number">1</span>][<span class="number">0</span>] + n - mod[i], f[i - <span class="number">1</span>][<span class="number">1</span>] + n - mod[i] - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        scanner.close();</span><br><span class="line">        System.out.println(min(f[tot][<span class="number">0</span>], f[tot][<span class="number">1</span>] + <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;P3558-POI2013-BAJ-Bytecomputer&quot;&gt;&lt;a href=&quot;#P3558-POI2013-BAJ-Bytecomputer&quot; class=&quot;headerlink&quot; title=&quot;P3558 [POI2013]BAJ-Bytecomputer&quot;
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="区间dp" scheme="http://yoursite.com/tags/%E5%8C%BA%E9%97%B4dp/"/>
    
      <category term="单调队列" scheme="http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="重要" scheme="http://yoursite.com/tags/%E9%87%8D%E8%A6%81/"/>
    
      <category term="省选" scheme="http://yoursite.com/tags/%E7%9C%81%E9%80%89/"/>
    
      <category term="数位dp" scheme="http://yoursite.com/tags/%E6%95%B0%E4%BD%8Ddp/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.27</title>
    <link href="http://yoursite.com/2019/05/27/Algorithm0527/"/>
    <id>http://yoursite.com/2019/05/27/Algorithm0527/</id>
    <published>2019-05-27T10:46:17.620Z</published>
    <updated>2019-05-29T14:31:24.312Z</updated>
    
    <content type="html"><![CDATA[<h3 id="P2744-USACO5-3-量取牛奶Milk-Measuring"><a href="#P2744-USACO5-3-量取牛奶Milk-Measuring" class="headerlink" title="P2744 [USACO5.3]量取牛奶Milk Measuring"></a><a href="https://www.luogu.org/problemnew/show/P2744" target="_blank" rel="noopener">P2744 [USACO5.3]量取牛奶Milk Measuring</a></h3><p>R:使用dfs枚举桶，dp完全背包判断合理性</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line">#define ri register int</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 迭代加深搜索id-dfs,从少到多枚举水桶数量、从小到大枚举水桶容积，第一次遇到的解一定是最优解</span></span><br><span class="line"><span class="comment"> * 判断合理性用完全背包</span></span><br><span class="line"><span class="comment"> * 编码难度不高，思路也很好想，但是这个复杂度上限非常高，所以我没想到这样也能AC</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">int</span> Q, P, V[<span class="number">105</span>], cache[<span class="number">105</span>], visited[<span class="number">105</span>], depth, flag, f[<span class="number">20005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    memset(f, <span class="number">0</span>, sizeof(f));</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i <= depth; i++) {</span><br><span class="line">        <span class="keyword">for</span> (ri j = cache[i]; j <= Q; j++) {</span><br><span class="line">            <span class="keyword">if</span> (f[j - cache[i]]) {</span><br><span class="line">                f[j] = <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f[Q];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (d == depth) {</span><br><span class="line">        <span class="keyword">if</span> (check()) {</span><br><span class="line">            printf(<span class="string">"%d "</span>, depth);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= depth; i++) {</span><br><span class="line">                printf(<span class="string">"%d "</span>, cache[i]);</span><br><span class="line">            }</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">            printf(<span class="string">"\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = tot; i <= P; i++) {</span><br><span class="line">        <span class="keyword">if</span> (!visited[i] && !flag) {</span><br><span class="line">            visited[i] = <span class="keyword">true</span>;</span><br><span class="line">            cache[d + <span class="number">1</span>] = V[i];</span><br><span class="line">            dfs(d + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    scanf(<span class="string">"%d %d"</span>, &Q, &P);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= P; i++)</span><br><span class="line">        scanf(<span class="string">"%d"</span>, &V[i]);</span><br><span class="line">    std::sort(V + <span class="number">1</span>, V + <span class="number">1</span> + P);</span><br><span class="line">    P = std::unique(V + <span class="number">1</span>, V + <span class="number">1</span> + P) - V - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= P; i++) {</span><br><span class="line">        depth = i;</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2513-HAOI2009-逆序对数列"><a href="#P2513-HAOI2009-逆序对数列" class="headerlink" title="P2513 [HAOI2009]逆序对数列"></a><a href="https://www.luogu.org/problemnew/show/P2513" target="_blank" rel="noopener">P2513 [HAOI2009]逆序对数列</a></h3><p>R:经典题,复杂度O(NK)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 经典题</span></span><br><span class="line"><span class="comment"> * f[i][j]表示1-i组成的有j对逆序对的方案数，那么添加一个数字i+1,根据插入位置不同</span></span><br><span class="line"><span class="comment"> * 可以添加0-i个逆序对，用前缀和保存一下即可。</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> N, K, f[<span class="number">1005</span>][<span class="number">1005</span>], sum[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cin >> N >> K;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= K; i++)</span><br><span class="line">        sum[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= K; j++) {</span><br><span class="line">            f[i][j] = (sum[i - <span class="number">1</span>][j] - (j >= i ? sum[i - <span class="number">1</span>][j - i] : <span class="number">0</span>) + mod) % mod;</span><br><span class="line">        }</span><br><span class="line">        sum[i][<span class="number">0</span>] = f[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= K; j++) {</span><br><span class="line">            sum[i][j] = (sum[i][j - <span class="number">1</span>] + f[i][j]) % mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    cout << f[N][K] << endl;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P4141-消失之物"><a href="#P4141-消失之物" class="headerlink" title="P4141 消失之物"></a><a href="https://www.luogu.org/problemnew/show/P4141" target="_blank" rel="noopener">P4141 消失之物</a></h3><p>R:第一种方法是跑N次01背包，复杂度为N<em>N</em>K，难以承受，第二种方法是使用补集的方法，复杂度NK,可以和P1450对比，两题都使用了补集</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 补集优化：</span></span><br><span class="line"><span class="comment"> * 可以跟P1450对比，都用了补集的思想</span></span><br><span class="line"><span class="comment"> * g[j]表示不做任何限制，构成j的方案数</span></span><br><span class="line"><span class="comment"> * ans = g[j] - 选i构成j</span></span><br><span class="line"><span class="comment"> * (首先选i构成j) ！=g[j-w[i]],因为g[j-w[i]]中的方案数可能包含选了i</span></span><br><span class="line"><span class="comment"> * 选i构成J == 不选i构成i-w[i]，f[i-w[i]]</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">int</span> N, M, f[maxn], v[maxn], g[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &N, &M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &v[i]);</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = M; j >= v[i]; j--) {</span><br><span class="line">            f[j] = (f[j] + f[j - v[i]]) % <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memcpy</span>(g, f, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">if</span> (j < v[i]) {</span><br><span class="line">                f[j] = g[j];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                f[j] = (g[j] - f[j - v[i]] + <span class="number">10</span>) % <span class="number">10</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, f[j]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P1373-小a和uim之大逃离"><a href="#P1373-小a和uim之大逃离" class="headerlink" title="P1373 小a和uim之大逃离"></a><a href="https://www.luogu.org/problemnew/show/P1373" target="_blank" rel="noopener">P1373 小a和uim之大逃离</a></h3><p>R:由于只能向下向右走，所以按照此顺序枚举位置和差值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">805</span>, mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * f[i][j][k][0]表示在i,j点，轮到小a取，a-uim分数的差值为k的方案数</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">int</span> N, M, K, chess[maxn][maxn], f[maxn][maxn][<span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    scanf(<span class="string">"%d %d %d"</span>, &N, &M, &K);</span><br><span class="line">    ++K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            scanf(<span class="string">"%d"</span>, &chess[i][j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            f[i][j][chess[i][j] % K][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k < K; k++) {</span><br><span class="line">                f[i][j][k][<span class="number">0</span>] = (f[i][j][k][<span class="number">0</span>] + f[i - <span class="number">1</span>][j][(k - chess[i][j] + K) % K][<span class="number">1</span>]) % mod;</span><br><span class="line">                f[i][j][k][<span class="number">0</span>] = (f[i][j][k][<span class="number">0</span>] + f[i][j - <span class="number">1</span>][(k - chess[i][j] + K) % K][<span class="number">1</span>]) % mod;</span><br><span class="line">                f[i][j][k][<span class="number">1</span>] = (f[i][j][k][<span class="number">1</span>] + f[i - <span class="number">1</span>][j][(k + chess[i][j]) % K][<span class="number">0</span>]) % mod;</span><br><span class="line">                f[i][j][k][<span class="number">1</span>] = (f[i][j][k][<span class="number">1</span>] + f[i][j - <span class="number">1</span>][(k + chess[i][j]) % K][<span class="number">0</span>]) % mod;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            ans = (ans + f[i][j][<span class="number">0</span>][<span class="number">1</span>]) % mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P3052-USACO12MAR-摩天大楼里的奶牛Cows-in-a-Skyscraper"><a href="#P3052-USACO12MAR-摩天大楼里的奶牛Cows-in-a-Skyscraper" class="headerlink" title="P3052 [USACO12MAR]摩天大楼里的奶牛Cows in a Skyscraper"></a><a href="https://www.luogu.org/problemnew/show/P3052" target="_blank" rel="noopener">P3052 [USACO12MAR]摩天大楼里的奶牛Cows in a Skyscraper</a></h3><p>R:看数据范围，考虑状压dp,f[i]表示状态为i是最小分组数,g[i]表示状态为i时剩余的最大空间(所有分组的电梯)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line">#define isset(a, b) (a&(1 << (b - 1))) != 0</span><br><span class="line">#define prev(a, b) a - (1 << (b - 1))</span><br><span class="line">#define max(a, b) a > b ? a : b</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首先看N<=18，所以应该是状压dp</span></span><br><span class="line"><span class="comment"> * f[i]表示状态为i是最小分组数,g[i]表示状态为i时剩余的最大空间(所有分组的电梯)</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span> + (<span class="number">1</span> << <span class="number">18</span>);</span><br><span class="line"><span class="keyword">int</span> V[<span class="number">19</span>], f[maxn], g[maxn], N, up, W;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    scanf(<span class="string">"%d %d"</span>, &N, &W);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++)</span><br><span class="line">        scanf(<span class="string">"%d"</span>, &V[i]);</span><br><span class="line">    up = (<span class="number">1</span> << N) - <span class="number">1</span>;</span><br><span class="line">    memset(f, <span class="number">0x3f</span>, sizeof(f));</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>, g[<span class="number">0</span>] = W;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= up; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">            <span class="keyword">if</span> (!isset(i, j))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> pre = prev(i, j);</span><br><span class="line">            <span class="keyword">if</span> (g[pre] >= V[j] && f[pre] <= f[i]) {</span><br><span class="line">                f[i] = f[pre];</span><br><span class="line">                g[i] = max(g[pre] - V[j], g[i]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (g[pre] < V[j] && f[pre] + <span class="number">1</span> <= f[i]) {</span><br><span class="line">                f[i] = f[pre] + <span class="number">1</span>;</span><br><span class="line">                g[i] = max(g[i], W - V[j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"%d\n"</span>, f[up]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P4933-大师"><a href="#P4933-大师" class="headerlink" title="P4933 大师"></a><a href="https://www.luogu.org/problemnew/show/P4933" target="_blank" rel="noopener">P4933 大师</a></h3><p>R：思维题，和打老鼠以及power收集那题类似</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * f[i][j]表示以i结尾，公差为j的等差数列个数，这个题和打老鼠那个题类似</span></span><br><span class="line"><span class="comment"> * 都是O(N^2)复杂度</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>, p = <span class="number">20000</span>;</span><br><span class="line"><span class="keyword">int</span> N, h[<span class="number">1005</span>], f[<span class="number">1005</span>][<span class="number">40005</span>], ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        scanf(<span class="string">"%d"</span>, &h[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j < i; j++) {</span><br><span class="line">            <span class="keyword">int</span> delta = h[i] - h[j] + p;</span><br><span class="line">            f[i][delta] = (f[j][delta] + f[i][delta] + <span class="number">1</span>) % mod;</span><br><span class="line">            ans = (ans + f[j][delta] + <span class="number">1</span>) % mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    ans = (ans + N) % mod;</span><br><span class="line">    printf(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P1987-摇钱树"><a href="#P1987-摇钱树" class="headerlink" title="P1987 摇钱树"></a><a href="https://www.luogu.org/problemnew/show/P1987" target="_blank" rel="noopener">P1987 摇钱树</a></h3><p>R:贪心+dp，先按照掉落速度从大到小排序，然后进行01背包</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 贪心+dp，先按照消耗排序，再进行01背包跑一遍即可。</span></span><br><span class="line"><span class="comment"> * 注意每次将ans置0</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line">struct Node {</span><br><span class="line">    <span class="keyword">int</span> money, cost;</span><br><span class="line">};</span><br><span class="line">Node nodes[maxn];</span><br><span class="line"><span class="keyword">int</span> N, K, f[maxn], ans;</span><br><span class="line"><span class="function">inline bool <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node& a, <span class="keyword">const</span> Node& b)</span> </span>{ <span class="keyword">return</span> a.cost > b.cost; }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (cin >> N >> K) {</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span> && K == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">            cin >> nodes[i].money;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++)</span><br><span class="line">            cin >> nodes[i].cost;</span><br><span class="line">        sort(nodes + <span class="number">1</span>, nodes + <span class="number">1</span> + N, cmp);</span><br><span class="line">        memset(f, ~<span class="number">0x3f</span>, sizeof(f)), f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = K; j >= <span class="number">1</span>; j--) {</span><br><span class="line">                <span class="comment">//注意这里的时间消耗是j-1而不是i-1</span></span><br><span class="line">                f[j] = max(f[j], f[j - <span class="number">1</span>] + max(<span class="number">0</span>, nodes[i].money - nodes[i].cost * (j - <span class="number">1</span>)));</span><br><span class="line">                ans = max(ans, f[j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        cout << ans << endl;</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="常规题"><a href="#常规题" class="headerlink" title="常规题"></a>常规题</h2><h3 id="P2018-消息传递"><a href="#P2018-消息传递" class="headerlink" title="P2018 消息传递"></a><a href="https://www.luogu.org/problemnew/show/P2018" target="_blank" rel="noopener">P2018 消息传递</a></h3><p>R:树形dp</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 树型dp，难度中等</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> N, tot, f[maxn], cache[maxn], ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">std::vector<<span class="keyword">int</span>> record[maxn];</span><br><span class="line">struct Node {</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Node* next;</span><br><span class="line">};</span><br><span class="line">Node *h[maxn], pool[maxn << <span class="number">1</span>];</span><br><span class="line"><span class="function">inline <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Node* p = &pool[tot++];</span><br><span class="line">    p->v = v, p->next = h[u], h[u] = p;</span><br><span class="line">}</span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{ <span class="keyword">return</span> a > b ? a : b; }</span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{ <span class="keyword">return</span> a > b ? b : a; }</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (Node* p = h[root]; p; p = p->next) {</span><br><span class="line">        <span class="keyword">if</span> (fa == p->v) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        dfs(p->v, root);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node* p = h[root]; p; p = p->next) {</span><br><span class="line">        <span class="keyword">if</span> (fa == p->v)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        cache[++n] = f[p->v];</span><br><span class="line">    }</span><br><span class="line">    std::sort(cache + <span class="number">1</span>, cache + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= n; i++) {</span><br><span class="line">        mx = max(mx, cache[i] + n + <span class="number">1</span> - i);</span><br><span class="line">    }</span><br><span class="line">    f[root] = mx;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        scanf(<span class="string">"%d"</span>, &u);</span><br><span class="line">        add_edge(u, i), add_edge(i, u);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        memset(f, <span class="number">0</span>, sizeof(f));</span><br><span class="line">        dfs(i, <span class="number">0</span>);</span><br><span class="line">        record[f[i]].push_back(i);</span><br><span class="line">        ans = min(ans, f[i]);</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"%d\n"</span>, ans + <span class="number">1</span>);</span><br><span class="line">    std::sort(record[ans].begin(), record[ans].end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < record[ans].size(); i++) {</span><br><span class="line">        printf(<span class="string">"%d "</span>, record[ans][i]);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P1782-旅行商的背包"><a href="#P1782-旅行商的背包" class="headerlink" title="P1782 旅行商的背包"></a><a href="https://www.luogu.org/problemnew/show/P1782" target="_blank" rel="noopener">P1782 旅行商的背包</a></h3><p>R:多重背包+完全背包，这道题卡常，如果不会写单调队列优化多重背包，可能会超时。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include <bits/stdc++.h></span><br><span class="line">#define ri register int</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多重背包二进制优化+完全背包</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, C, V[maxn], W[maxn], D[maxn], f[maxn];</span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{ <span class="keyword">return</span> a > b ? a : b; }</span><br><span class="line"><span class="function">inline <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!isdigit(c)) {</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = -<span class="number">1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (isdigit(c)) {</span><br><span class="line">        r = <span class="number">10</span> * r + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f * r;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    N = read(), M = read(), C = read();</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        V[i] = read(), W[i] = read(), D[i] = read();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        ri k = <span class="number">1</span>, amount = D[i];</span><br><span class="line">        <span class="keyword">if</span> (amount * V[i] >= C) {</span><br><span class="line">            <span class="keyword">for</span> (ri j = V[i]; j <= C; j++) {</span><br><span class="line">                f[j] = max(f[j], f[j - V[i]] + W[i]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (k <= amount) {</span><br><span class="line">            <span class="keyword">for</span> (ri j = C; j >= k * V[i]; j--) {</span><br><span class="line">                f[j] = max(f[j], f[j - k * V[i]] + k * W[i]);</span><br><span class="line">            }</span><br><span class="line">            amount -= k;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (ri j = C; j >= amount * V[i]; j--) {</span><br><span class="line">            f[j] = max(f[j], f[j - amount * V[i]] + amount * W[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">int</span> a = read(), b = read(), c = read();</span><br><span class="line">        <span class="keyword">for</span> (ri j = C; j; j--) {</span><br><span class="line">            <span class="keyword">for</span> (ri k = <span class="number">0</span>; k <= j; k++) {</span><br><span class="line">                f[j] = max(f[j], f[j - k] + (a * k + b) * k + c);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"%d\n"</span>, f[C]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;P2744-USACO5-3-量取牛奶Milk-Measuring&quot;&gt;&lt;a href=&quot;#P2744-USACO5-3-量取牛奶Milk-Measuring&quot; class=&quot;headerlink&quot; title=&quot;P2744 [USACO5.3]量取牛奶Milk M
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="状压dp" scheme="http://yoursite.com/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="树形dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
      <category term="补集" scheme="http://yoursite.com/tags/%E8%A1%A5%E9%9B%86/"/>
    
      <category term="分组dp" scheme="http://yoursite.com/tags/%E5%88%86%E7%BB%84dp/"/>
    
      <category term="思维" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="多重背包" scheme="http://yoursite.com/tags/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/"/>
    
      <category term="完全背包" scheme="http://yoursite.com/tags/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
    
      <category term="01背包" scheme="http://yoursite.com/tags/01%E8%83%8C%E5%8C%85/"/>
    
      <category term="逆序对" scheme="http://yoursite.com/tags/%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.24</title>
    <link href="http://yoursite.com/2019/05/24/Algorithm0524/"/>
    <id>http://yoursite.com/2019/05/24/Algorithm0524/</id>
    <published>2019-05-24T11:49:09.999Z</published>
    <updated>2019-05-24T12:35:29.377Z</updated>
    
    <content type="html"><![CDATA[<h3 id="P3957-跳房子"><a href="#P3957-跳房子" class="headerlink" title="P3957 跳房子"></a><a href="https://www.luogu.org/problemnew/show/P3957" target="_blank" rel="noopener">P3957 跳房子</a></h3><p>R:二分答案+单调队列优化dp,是很好很好的题目。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500000</span> + <span class="number">10</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分答案+dp+单调队列</span></span><br><span class="line"><span class="comment"> * 首先如果花费g个金币能过，那么g+1个金币肯定也能过</span></span><br><span class="line"><span class="comment"> * 其次，f[i] = max(f[k]),f[k]具有范围，可以用单调队列维护，这样就可以有O(N)的复杂度</span></span><br><span class="line"><span class="comment"> * 由于有效范围是[x-r,x-l]，所以不能每来一个数据就直接把它加进单调队列，需要首先判断它的范围</span></span><br><span class="line"><span class="comment"> * 然后剔除垃圾数据，最后取队头，看看存不存在</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">int</span> N, D, K, dis[maxn], score[maxn], f[maxn], h, t, Q[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> g)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mn = max(D - g, <span class="number">1</span>);</span><br><span class="line">    h = <span class="number">1</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="comment">//首先把符合要求的加进来</span></span><br><span class="line">        <span class="keyword">for</span> (; dis[i] - dis[j] >= mn; j++) {</span><br><span class="line">            <span class="comment">//无法到达的不选</span></span><br><span class="line">            <span class="keyword">if</span> (f[j] == -inf) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">while</span> (h <= t && f[Q[t]] <= f[j]) {</span><br><span class="line">                t--;</span><br><span class="line">            }</span><br><span class="line">            Q[++t] = j;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//删除过期数据</span></span><br><span class="line">        <span class="keyword">while</span> (h <= t && dis[i] - dis[Q[h]] > g + D) {</span><br><span class="line">            h++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (h <= t) {</span><br><span class="line">            f[i] = f[Q[h]] + score[i];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            f[i] = -inf;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (f[i] >= K) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//freopen("C:\\Users\\hjw\\Downloads\\testdata.in", "r", stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &N, &D, &K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &dis[i], &score[i]);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = dis[N], ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">/**首先写一个二分答案的框架**/</span></span><br><span class="line">    <span class="keyword">while</span> (l <= r) {</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) {</span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P1879-USACO06NOV-玉米田Corn-Fields"><a href="#P1879-USACO06NOV-玉米田Corn-Fields" class="headerlink" title="P1879 [USACO06NOV]玉米田Corn Fields"></a><a href="https://www.luogu.org/problemnew/show/P1879" target="_blank" rel="noopener">P1879 [USACO06NOV]玉米田Corn Fields</a></h3><p>R:二维的状压dp,首先当前行和前前行的状态是无关的，只与前一行有关，判断相邻行的数字是否都为1，只需要位运算中的&运算就可以，如果一一比较会增加复杂度</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断两个数是否同一位都为1 s&t</span></span><br><span class="line"><span class="comment"> * 状态压缩dp</span></span><br><span class="line"><span class="comment"> * f[i][s]表示第i行以s为结尾的方案数量</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">13</span>, maxs = (<span class="number">1</span> << <span class="number">12</span>) + <span class="number">10</span>, mod = <span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxs], N, M, chess[maxn][maxn], up, cache[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        cache[i] = (s & (<span class="number">1</span> << (M - i))) != <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">if</span> (cache[i] && chess[r][i] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (cache[i] == <span class="number">1</span> && cache[i - <span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//这个check2可以直接用s&s1是否为0代替</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check2</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> s1)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">if</span> ((s & (<span class="number">1</span> << (i - <span class="number">1</span>))) != <span class="number">0</span> && (s1 & (<span class="number">1</span> << (i - <span class="number">1</span>))) != <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    up = (<span class="number">1</span> << M) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="built_in">cin</span> >> chess[i][j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= up; i++) {</span><br><span class="line">        <span class="keyword">if</span> (check(<span class="number">1</span>, i)) {</span><br><span class="line">            f[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s <= up; s++) {</span><br><span class="line">            <span class="keyword">if</span> (!check(i, s)) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l <= up; l++) {</span><br><span class="line">                <span class="keyword">if</span> (!check(i - <span class="number">1</span>, l))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//tql</span></span><br><span class="line">                <span class="keyword">if</span> (s & l)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                f[i][s] = (f[i][s] + f[i - <span class="number">1</span>][l]) % mod;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= up; i++) {</span><br><span class="line">        ans = (ans + f[N][i]) % mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P1613-跑路"><a href="#P1613-跑路" class="headerlink" title="P1613 跑路"></a><a href="https://www.luogu.org/problemnew/show/P1613" target="_blank" rel="noopener">P1613 跑路</a></h3><p>R:一个空间器跑2^k, 那么它要跑2^(k+1)， 只能通过两次2^k,从小到大枚举K，中间枚举i,j，最后用堆优化后的迪杰斯特拉算法算一下最短路径。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P pair <span class="meta-string">< int, int></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP(d, v) make_pair(d, v)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一次的距离是2^k，所以先预处理边，再跑一遍最短路即可。</span></span><br><span class="line"><span class="comment"> * 如何预处理出2^k,需要用到倍增</span></span><br><span class="line"><span class="comment"> * G[i][j][k]表示i->j有一条距离为k的路径，那么如果i->t t->j分别有一条2^(k-1)</span></span><br><span class="line"><span class="comment"> * 的路径，那么i->j就有一条2^k的路径，所以只需要从小到大枚举k，然后再循环中枚举</span></span><br><span class="line"><span class="comment"> * i,j,t即可，需要用到一个四重的循环，注意每条边长度是1，所以G[i][j][0]=0（当i,j联通）</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="comment">//2^63-1,所以k最大应该为62</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">64</span>;</span><br><span class="line"><span class="comment">//存图</span></span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn][maxn], N, M, dis[maxn][maxn], cache[maxn], visited[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dj</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    priority_queue<P, <span class="built_in">vector</span><P>, greater<P>> q;</span><br><span class="line">    <span class="built_in">memset</span>(cache, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(cache));</span><br><span class="line">    cache[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    q.push(MP(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) {</span><br><span class="line">        P h = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (visited[h.second]) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        visited[h.second] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> v = h.second, d = h.first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">            <span class="keyword">if</span> (d + dis[v][i] < cache[i]) {</span><br><span class="line">                cache[i] = d + dis[v][i];</span><br><span class="line">                q.push(MP(cache[i], i));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cache[N];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> >> u >> v;</span><br><span class="line">        G[u][v][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dis[u][v] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//倍增</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= <span class="number">62</span>; k++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t <= N; t++) {</span><br><span class="line">                    <span class="keyword">if</span> (G[i][t][k - <span class="number">1</span>] && G[t][j][k - <span class="number">1</span>]) {</span><br><span class="line">                        G[i][j][k] = <span class="number">1</span>;</span><br><span class="line">                        dis[i][j] = <span class="number">1</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << dj() << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2883-USACO07MAR-牛交通Cow-Traffic"><a href="#P2883-USACO07MAR-牛交通Cow-Traffic" class="headerlink" title="P2883 [USACO07MAR]牛交通Cow Traffic"></a><a href="https://www.luogu.org/problemnew/show/P2883" target="_blank" rel="noopener">P2883 [USACO07MAR]牛交通Cow Traffic</a></h3><p>R:之前没有遇到过的题目，使用bfs进行树形dp,由末端依次向上传播，而且当一个节点的入度为0时表示状态更新完毕，可以入队更新其他节点。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>, maxm = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">int</span> mc[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Node* next;</span><br><span class="line">};</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dp问题,某条边的数量等于牧场->左端点方案*右端点->N的方案</span></span><br><span class="line"><span class="comment"> * 关键是求方案数</span></span><br><span class="line"><span class="comment"> * 需要用bfs的方法，如果一个点在队列内则不重复入队，因此需要一个Inq标志数组</span></span><br><span class="line"><span class="comment"> * 此外还有一个非常非常非常非常重要的细节就是：没更新一次后缀节点时，需要</span></span><br><span class="line"><span class="comment"> * 将后缀节点的入度减一，直到入度为0时才可以入队列</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="comment">//0表示正图，1存反图</span></span><br><span class="line">Node *h[maxn][<span class="number">2</span>], pool[maxm][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> tot[<span class="number">2</span>], N, M, in[maxn][<span class="number">2</span>], dp[maxn][<span class="number">2</span>], Q[maxn], inq[maxn], head, tail, ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_positive</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Node* p = &pool[tot[<span class="number">0</span>]++][<span class="number">0</span>];</span><br><span class="line">    p->v = v, p->next = h[u][<span class="number">0</span>], h[u][<span class="number">0</span>] = p;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_negative</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Node* p = &pool[tot[<span class="number">1</span>]++][<span class="number">1</span>];</span><br><span class="line">    p->v = v, p->next = h[u][<span class="number">1</span>], h[u][<span class="number">1</span>] = p;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs_p</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">    head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">if</span> (!in[i][<span class="number">0</span>]) {</span><br><span class="line">            inq[i] = <span class="number">1</span>;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            Q[++tail] = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (head <= tail) {</span><br><span class="line">        <span class="keyword">int</span> top = Q[head++];</span><br><span class="line">        inq[top] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node* p = h[top][<span class="number">0</span>]; p; p = p->next) {</span><br><span class="line">            dp[p->v][<span class="number">0</span>] += dp[top][<span class="number">0</span>];</span><br><span class="line">            in[p->v][<span class="number">0</span>]--;</span><br><span class="line">            <span class="keyword">if</span> (inq[p->v] || in[p->v][<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            Q[++tail] = p->v;</span><br><span class="line">            inq[p->v] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">    head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">    Q[++tail] = N, inq[N] = <span class="number">1</span>, dp[N][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (head <= tail) {</span><br><span class="line">        <span class="keyword">int</span> top = Q[head++];</span><br><span class="line">        inq[top] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node* p = h[top][<span class="number">1</span>]; p; p = p->next) {</span><br><span class="line">            dp[p->v][<span class="number">1</span>] += dp[top][<span class="number">1</span>];</span><br><span class="line">            in[p->v][<span class="number">1</span>]--;</span><br><span class="line">            <span class="keyword">if</span> (inq[p->v] || in[p->v][<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            Q[++tail] = p->v;</span><br><span class="line">            inq[p->v] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> >> u >> v;</span><br><span class="line">        in[v][<span class="number">0</span>]++, in[u][<span class="number">1</span>]++;</span><br><span class="line">        add_positive(u, v), add_negative(v, u);</span><br><span class="line">    }</span><br><span class="line">    bfs_p();</span><br><span class="line">    bfs_n();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (Node* p = h[i][<span class="number">0</span>]; p; p = p->next) {</span><br><span class="line">            <span class="keyword">int</span> u = i, v = p->v;</span><br><span class="line">            ans = max(ans, dp[u][<span class="number">0</span>] * dp[v][<span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2851-USACO06DEC-最少的硬币The-Fewest-Coins"><a href="#P2851-USACO06DEC-最少的硬币The-Fewest-Coins" class="headerlink" title="P2851 [USACO06DEC]最少的硬币The Fewest Coins"></a><a href="https://www.luogu.org/problemnew/show/P2851" target="_blank" rel="noopener">P2851 [USACO06DEC]最少的硬币The Fewest Coins</a></h3><p>R:这题需要用到鸽笼原理，我不会证明，f[i]表示付钱人付出i元的最小硬币（多重背包），g[i]表示店主找i元的最小硬币(最大枚举到Vmax^2可以找到最优解)（完全背包）</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个题需要用到鸽笼原理，我不会证明</span></span><br><span class="line"><span class="comment"> * 商店老板最大找钱数为Vmax^2,而买家只需要枚举到t+Vmax^2即可</span></span><br><span class="line"><span class="comment"> * 剩下的就是完全背包以及二进制优化的多重背包</span></span><br><span class="line"><span class="comment"> * 模板：</span></span><br><span class="line"><span class="comment"> * k=1,amount=num[i]</span></span><br><span class="line"><span class="comment"> * while(k<=amount){</span></span><br><span class="line"><span class="comment"> *     for(int j = mx;j>=k * v[i];j--){</span></span><br><span class="line"><span class="comment"> *         f[j] = min(f[j],f[j-k*v[i]]+k);</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> *     amount -= k;</span></span><br><span class="line"><span class="comment"> *     k *= 2;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * for(int j = mx;j>=amount * v[i];j--){</span></span><br><span class="line"><span class="comment"> *     f[j] = min(f[j],f[j-amount*v[i]]+amount);</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>, maxv = <span class="number">120</span> * <span class="number">120</span> + <span class="number">10000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> N, T, V[maxn], C[maxn], f[maxv], g[maxv], mx, ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> V[i];</span><br><span class="line">        mx = max(V[i] * V[i], mx);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> C[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f)), <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(g));</span><br><span class="line">    f[<span class="number">0</span>] = g[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//跑一编完全背包</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V[i]; j <= mx; j++) {</span><br><span class="line">            g[j] = min(g[j], g[j - V[i]] + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//跑一遍多重背包</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">if</span> (C[i] * V[i] >= mx + T) {</span><br><span class="line">            <span class="comment">//当作完全背包</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = V[i]; j <= mx + T; j++) {</span><br><span class="line">                f[j] = min(f[j], f[j - V[i]] + <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">1</span>, amount = C[i];</span><br><span class="line">        <span class="keyword">while</span> (k <= amount) {</span><br><span class="line">            <span class="comment">//01背包</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = mx + T; j >= k * V[i]; j--) {</span><br><span class="line">                f[j] = min(f[j], f[j - k * V[i]] + k);</span><br><span class="line">            }</span><br><span class="line">            amount -= k;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = mx + T; j >= amount * V[i]; j--) {</span><br><span class="line">            f[j] = min(f[j], f[j - amount * V[i]] + amount);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = T; i <= T + mx; i++) {</span><br><span class="line">        ans = min(ans, f[i] + g[i - T]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (ans >= <span class="number">0x3f3f3f3f</span>) {</span><br><span class="line">        <span class="built_in">cout</span> << <span class="number">-1</span> << <span class="built_in">endl</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P3914-染色计数"><a href="#P3914-染色计数" class="headerlink" title="P3914 染色计数"></a><a href="https://www.luogu.org/problemnew/show/P3914" target="_blank" rel="noopener">P3914 染色计数</a></h3><p>R:树形dp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 树形dp，dp[j][k]表示j节点颜色为k的方案数，等于儿子的方案数连乘</span></span><br><span class="line"><span class="comment"> * 用一个数组保存儿子总方案数，则不等于的减去就可以</span></span><br><span class="line"><span class="comment"> * 注意用cin,cout会超时</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Node* next;</span><br><span class="line">};</span><br><span class="line">Node *h[maxn], pool[maxn << <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, dp[maxn][maxn], total[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Node* p = &pool[tot++];</span><br><span class="line">    p->v = v, p->next = h[u], h[u] = p;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (Node* p = h[root]; p; p = p->next) {</span><br><span class="line">        <span class="keyword">if</span> (p->v == fa) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        dfs(p->v, root);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">            <span class="keyword">int</span> num = (total[p->v] - dp[p->v][i] + mod) % mod;</span><br><span class="line">            dp[root][i] = ((ll)dp[root][i] * (ll)num) % mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        total[root] = (total[root] + dp[root][i]) % mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &N, &M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">1</span>; j <= k; j++) {</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &c);</span><br><span class="line">            dp[i][c] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i < N; i++) {</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &u, &v);</span><br><span class="line">        add_edge(u, v), add_edge(v, u);</span><br><span class="line">    }</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, total[<span class="number">1</span>]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P3147-USACO16OPEN-262144"><a href="#P3147-USACO16OPEN-262144" class="headerlink" title="P3147 [USACO16OPEN]262144"></a><a href="https://www.luogu.org/problemnew/show/P3147" target="_blank" rel="noopener">P3147 [USACO16OPEN]262144</a></h3><p>R:思维题，不会,j 是两个 j-1 合并而成的，因此转移方程有点像是倍增</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx(a,b) a>b?a:b</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写的max似乎比std里面的max快</span></span><br><span class="line"><span class="comment"> * 这题的转移方程太难:</span></span><br><span class="line"><span class="comment"> * f[i][j]表示以i为起点，合并成数字j时的区间终点.</span></span><br><span class="line"><span class="comment"> * f[i][j] = f[f[i][j-1]][j-1]</span></span><br><span class="line"><span class="comment"> * 两个1合并生成2,四个1生成3，8个1生成4,因此总共j最大为58</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">262144</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">60</span>], N, d[maxn], mx = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &d[i]), f[i][d[i]] = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">2</span>; j <= <span class="number">58</span>; j++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">            <span class="keyword">if</span> (!f[i][j]) {</span><br><span class="line">                f[i][j] = f[f[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (f[i][j]) {</span><br><span class="line">                mx = max(j,mx);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mx);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P5144-蜈蚣"><a href="#P5144-蜈蚣" class="headerlink" title="P5144 蜈蚣"></a><a href="https://www.luogu.org/problemnew/show/P5144" target="_blank" rel="noopener">P5144 蜈蚣</a></h3><p>R:异或的性质+区间dp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异或运算类似于前缀和，假设1,2,3,...i的异或为Si,j>i，要求j+1,...i的异或</span></span><br><span class="line"><span class="comment"> * 只需要Si xor Sj即可，因此这道题就变成一道常规的区间dp题目</span></span><br><span class="line"><span class="comment"> * 需要注意的是dp[i][1] = dp[k][0] + [k+1,j]，如果不为dp初始化为-inf</span></span><br><span class="line"><span class="comment"> * 将会有一半的WA，这个是之前没有注意到的。</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, W[maxn], S[maxn], dp[maxn][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &N, &M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &W[i]);</span><br><span class="line">        S[i] = S[i - <span class="number">1</span>] ^ W[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(dp, ~<span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">if</span> (j > i) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j - <span class="number">1</span>; k < i; k++) {</span><br><span class="line">                dp[i][j] = max(dp[i][j], dp[k][j - <span class="number">1</span>] + (S[i] ^ S[k]));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[N][M]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;P3957-跳房子&quot;&gt;&lt;a href=&quot;#P3957-跳房子&quot; class=&quot;headerlink&quot; title=&quot;P3957 跳房子&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3957&quot; targe
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="状压dp" scheme="http://yoursite.com/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
      <category term="迪杰斯特拉算法" scheme="http://yoursite.com/tags/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/"/>
    
      <category term="树形dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
      <category term="单调队列" scheme="http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="思维" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="多重背包" scheme="http://yoursite.com/tags/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/"/>
    
      <category term="完全背包" scheme="http://yoursite.com/tags/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
    
      <category term="01背包" scheme="http://yoursite.com/tags/01%E8%83%8C%E5%8C%85/"/>
    
      <category term="二分答案" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="倍增" scheme="http://yoursite.com/tags/%E5%80%8D%E5%A2%9E/"/>
    
      <category term="bfs树形dp" scheme="http://yoursite.com/tags/bfs%E6%A0%91%E5%BD%A2dp/"/>
    
      <category term="异或" scheme="http://yoursite.com/tags/%E5%BC%82%E6%88%96/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.23</title>
    <link href="http://yoursite.com/2019/05/23/Algorithm0523/"/>
    <id>http://yoursite.com/2019/05/23/Algorithm0523/</id>
    <published>2019-05-23T07:45:20.748Z</published>
    <updated>2019-05-24T12:28:37.277Z</updated>
    
    <content type="html"><![CDATA[<h3 id="P2530-SHOI2001-化工厂装箱员"><a href="#P2530-SHOI2001-化工厂装箱员" class="headerlink" title="P2530 [SHOI2001]化工厂装箱员"></a><a href="https://www.luogu.org/problemnew/show/P2530" target="_blank" rel="noopener">P2530 [SHOI2001]化工厂装箱员</a></h3><p>R:挺难的一道动态规划题</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dp[i][j][k][l]表示前i个物品，手头有j个A,k个B,l个C的最小装箱数，当j+k+l>10时不处理</span></span><br><span class="line"><span class="comment"> * 没新来一个物品，则可以由上一个状态转移（不装箱），装箱数不变</span></span><br><span class="line"><span class="comment"> * 可以选择装箱，更新最小装箱数</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">15</span>][<span class="number">15</span>][<span class="number">15</span>], N;</span><br><span class="line"><span class="keyword">char</span> type[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> type[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">10</span>; j >= <span class="number">0</span>; j--) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">10</span>; k >= <span class="number">0</span>; k--) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">10</span>; l >= <span class="number">0</span>; l--) {</span><br><span class="line">                    <span class="keyword">if</span> (j + k + l > <span class="number">10</span>) {</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span> (type[i] == <span class="string">'A'</span> && j + k + l <= <span class="number">10</span> && j > <span class="number">0</span>) {</span><br><span class="line">                        dp[i][j][k][l] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>][k][l];</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span> (type[i] == <span class="string">'B'</span> && j + k + l <= <span class="number">10</span> && k > <span class="number">0</span>) {</span><br><span class="line">                        dp[i][j][k][l] = dp[i - <span class="number">1</span>][j][k - <span class="number">1</span>][l];</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span> (type[i] == <span class="string">'C'</span> && j + k + l <= <span class="number">10</span> && l > <span class="number">0</span>) {</span><br><span class="line">                        dp[i][j][k][l] = dp[i - <span class="number">1</span>][j][k][l - <span class="number">1</span>];</span><br><span class="line">                    }</span><br><span class="line">                    dp[i][<span class="number">0</span>][k][l] = min(dp[i][<span class="number">0</span>][k][l], dp[i][j][k][l] + <span class="number">1</span>);</span><br><span class="line">                    dp[i][j][<span class="number">0</span>][l] = min(dp[i][j][<span class="number">0</span>][l], dp[i][j][k][l] + <span class="number">1</span>);</span><br><span class="line">                    dp[i][j][k][<span class="number">0</span>] = min(dp[i][j][k][<span class="number">0</span>], dp[i][j][k][l] + <span class="number">1</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << dp[N][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2587-ZJOI2008-泡泡堂"><a href="#P2587-ZJOI2008-泡泡堂" class="headerlink" title="P2587 [ZJOI2008]泡泡堂"></a><a href="https://www.luogu.org/problemnew/show/P2587" target="_blank" rel="noopener">P2587 [ZJOI2008]泡泡堂</a></h3><p>R:田忌赛马问题，贪心</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 贪心问题，两个指针，如果弱马比地方弱马强则比赛，如果强马比对方强马强也比赛，反之弱马就去送</span></span><br><span class="line"><span class="comment"> * 马头</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> my[maxn], they[maxn], N;</span><br><span class="line"><span class="comment">/*我太懒了，都不想写快读*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) {</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) {</span><br><span class="line">        r = <span class="number">10</span> * r + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f * r;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solo</span><span class="params">(<span class="keyword">int</span>& win, <span class="keyword">int</span>& lost, <span class="keyword">int</span>* fixed, <span class="keyword">int</span>* unfixed)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    win = lost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> fs = <span class="number">1</span>, fe = N, us = <span class="number">1</span>, ue = N;</span><br><span class="line">    <span class="keyword">while</span> (fs <= fe) {</span><br><span class="line">        <span class="comment">//最弱的比敌最弱的强，则直接比较</span></span><br><span class="line">        <span class="keyword">if</span> (unfixed[us] > fixed[fs]) {</span><br><span class="line">            win += <span class="number">2</span>;</span><br><span class="line">            us++, fs++;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (unfixed[ue] > fixed[fe]) {</span><br><span class="line">            ue--, fe--, win += <span class="number">2</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (unfixed[us] == fixed[fe]) {</span><br><span class="line">                win += <span class="number">1</span>, lost += <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                lost += <span class="number">2</span>;</span><br><span class="line">            }</span><br><span class="line">            us++, fe--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    N = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        my[i] = read();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        they[i] = read();</span><br><span class="line">    }</span><br><span class="line">    sort(my + <span class="number">1</span>, my + <span class="number">1</span> + N), sort(they + <span class="number">1</span>, they + <span class="number">1</span> + N);</span><br><span class="line">    <span class="keyword">int</span> win, lost;</span><br><span class="line">    solo(win, lost, they, my);</span><br><span class="line">    <span class="built_in">cout</span> << win << <span class="string">" "</span>;</span><br><span class="line">    solo(win, lost, my, they);</span><br><span class="line">    <span class="built_in">cout</span> << lost << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2948-USACO09OPEN-滑雪课Ski-Lessons"><a href="#P2948-USACO09OPEN-滑雪课Ski-Lessons" class="headerlink" title="P2948 [USACO09OPEN]滑雪课Ski Lessons"></a><a href="https://www.luogu.org/problemnew/show/P2948" target="_blank" rel="noopener">P2948 [USACO09OPEN]滑雪课Ski Lessons</a></h3><p>R:贪心+dp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里的T==10，则应该要从t=0时刻开始推</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs = <span class="number">105</span>, maxn = <span class="number">10000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> m, l, a, e;</span><br><span class="line">} nodes[maxs];</span><br><span class="line"><span class="keyword">int</span> d[maxn], c[maxn], f[maxn][maxs], T, S, N, t[maxs], s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &T, &S, &N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= S; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &nodes[i].m, &nodes[i].l, &nodes[i].a);</span><br><span class="line">        nodes[i].e = nodes[i].m + nodes[i].l;</span><br><span class="line">        s[nodes[i].m] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &c[i], &d[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(t, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(t));</span><br><span class="line">    <span class="comment">//预处理出能力为i时能够滑的时间最短的雪,这里使用了贪心，当然是选择时间最短的雪来伐</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i < maxs; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">            <span class="keyword">if</span> (c[j] <= i) {</span><br><span class="line">                t[i] = min(t[i], d[j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(f, ~<span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从当前状态向后退</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < T; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j < maxs; j++) {</span><br><span class="line">            <span class="keyword">if</span> (f[i][j] < <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> <= T) {</span><br><span class="line">                f[i + <span class="number">1</span>][j] = max(f[i + <span class="number">1</span>][j], f[i][j]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (i + t[j] <= T) {</span><br><span class="line">                f[i + t[j]][j] = max(f[i + t[j]][j], f[i][j] + <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (s[i]) {</span><br><span class="line">                <span class="comment">//学了之后能力下降肯定不学（贪心）</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= S; k++) {</span><br><span class="line">                    <span class="keyword">if</span> (nodes[k].a >= j && nodes[k].m == i && nodes[k].e <= T) {</span><br><span class="line">                        f[nodes[k].e][nodes[k].a] = max(f[nodes[k].e][nodes[k].a], f[i][j]);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i < maxs; i++) {</span><br><span class="line">        ans = max(ans, f[T][i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P1858-多人背包"><a href="#P1858-多人背包" class="headerlink" title="P1858 多人背包"></a><a href="https://www.luogu.org/problemnew/show/P1858" target="_blank" rel="noopener">P1858 多人背包</a></h3><p>R:注意要将dp数组设置为-inf，因为如果只是0，那么前k优解都是最优解</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * f[v][k]表示体积为v时的第K优解，则f[v][k]选择放或不放会有两个结果</span></span><br><span class="line"><span class="comment"> * 所以会有一个2*K个结果，下一阶段的最K优解一定在其中，对其进行归并排序</span></span><br><span class="line"><span class="comment"> * 复杂度为O(K)，取前k个即可</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span> + <span class="number">10</span>, maxv = <span class="number">5000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> K, V, N, f[maxv][maxn], w[maxn], v[maxn], win[maxn], lost[maxn], len, cache[maxn << <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">1</span>, p2 = <span class="number">1</span>, p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 <= K && p2 <= K) {</span><br><span class="line">        <span class="keyword">if</span> (win[p1] >= lost[p2]) {</span><br><span class="line">            cache[++p] = win[p1++];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            cache[++p] = lost[p2++];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (p1 <= K) {</span><br><span class="line">        cache[++p] = win[p1++];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (p2 <= K) {</span><br><span class="line">        cache[++p] = lost[p2++];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> K >> V >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> v[i] >> w[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(f, ~<span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f)), f[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j >= v[i]; j--) {</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= K; k++) {</span><br><span class="line">                <span class="keyword">int</span> a = f[j][k];</span><br><span class="line">                <span class="keyword">int</span> b = f[j - v[i]][k] + w[i];</span><br><span class="line">                <span class="keyword">if</span> (a > b) {</span><br><span class="line">                    win[++len] = a, lost[len] = b;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    win[++len] = b, lost[len] = a;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            merge();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= K; k++) {</span><br><span class="line">                f[j][k] = cache[k];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= K; i++)</span><br><span class="line">        sum += f[V][i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2014-选课"><a href="#P2014-选课" class="headerlink" title="P2014 选课"></a><a href="https://www.luogu.org/problemnew/show/P2014" target="_blank" rel="noopener">P2014 选课</a></h3><p>R:树形dp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, score[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Node* next;</span><br><span class="line">};</span><br><span class="line">Node *h[maxn], pool[maxn];</span><br><span class="line"><span class="keyword">int</span> tot, father[maxn], pre[maxn], cost[maxn][maxn], f[maxn], sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Node* p = &pool[tot++];</span><br><span class="line">    p->v = v, p->next = h[u], h[u] = p;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cost[root][<span class="number">0</span>] = <span class="number">0</span>, cost[root][<span class="number">1</span>] = score[root];</span><br><span class="line">    <span class="keyword">if</span> (!h[root]) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node* p = h[root]; p; p = p->next) {</span><br><span class="line">        <span class="keyword">int</span> cur = dfs(p->v);</span><br><span class="line">        sum += cur;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = sum; i >= <span class="number">1</span>; i--) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= i - <span class="number">1</span>; j++) {</span><br><span class="line">                cost[root][i] = max(cost[root][i - j] + cost[p->v][j], cost[root][i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &father[i], &score[i]);</span><br><span class="line">        <span class="keyword">if</span> (father[i] != <span class="number">0</span>) {</span><br><span class="line">            add_edge(father[i], i), pre[i] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">if</span> (!pre[i]) {</span><br><span class="line">            sum[i] = dfs(i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">if</span> (!pre[i]) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = M; j >= <span class="number">1</span>; j--) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k <= j; k++) {</span><br><span class="line">                    f[j] = max(f[j], f[j - k] + cost[i][k]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[M]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="常规题"><a href="#常规题" class="headerlink" title="常规题"></a>常规题</h2><h3 id="P2113-看球泡妹子"><a href="#P2113-看球泡妹子" class="headerlink" title="P2113 看球泡妹子"></a><a href="https://www.luogu.org/problemnew/show/P2113" target="_blank" rel="noopener">P2113 看球泡妹子</a></h3><p>R:01背包</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, K, C, A[maxn], B[maxn], f[maxn][<span class="number">2005</span>], ans = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M >> K >> C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> A[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> B[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(f, ~<span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">int</span> a, b, w;</span><br><span class="line">        <span class="built_in">cin</span> >> a >> b;</span><br><span class="line">        w = B[a] + B[b];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = K; j >= <span class="number">1</span>; j--) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2004</span>; k >= w; k--) {</span><br><span class="line">                f[j][k] = max(f[j][k], f[j - <span class="number">1</span>][k - w] + A[a] * A[b]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= K; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = C; j <= <span class="number">2004</span>; j++) {</span><br><span class="line">            ans = max(ans, f[i][j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2654-原核生物培养"><a href="#P2654-原核生物培养" class="headerlink" title="P2654 原核生物培养"></a><a href="https://www.luogu.org/problemnew/show/P2654" target="_blank" rel="noopener">P2654 原核生物培养</a></h3><p>R:类似石子合并的区间dp，需要用小根堆，难度不大</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 石子合并问题+小根堆</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span> << <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, K, arr[maxn], ans, f[maxn][maxn], sum[maxn];</span><br><span class="line">priority_queue<<span class="keyword">int</span>, <span class="built_in">vector</span><<span class="keyword">int</span>>, greater<<span class="keyword">int</span>>> q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len <= M; len++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s <= M * <span class="number">2</span>; s++) {</span><br><span class="line">            <span class="keyword">int</span> e = s + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (e > <span class="number">2</span> * M) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = s; k < e; k++) {</span><br><span class="line">                f[s][e] = min(f[s][k] + f[k + <span class="number">1</span>][e] + sum[e] - sum[s - <span class="number">1</span>], f[s][e]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mn = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        mn = min(mn, f[i][i + M - <span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> mn;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M >> K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="built_in">cin</span> >> tmp;</span><br><span class="line">        q.push(tmp);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= K; i++) {</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            <span class="built_in">cin</span> >> tmp;</span><br><span class="line">            arr[tmp] = arr[tmp + M] = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            s += arr[tmp];</span><br><span class="line">        }</span><br><span class="line">        q.push(s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M * <span class="number">2</span>; j++) {</span><br><span class="line">            sum[j] = sum[j - <span class="number">1</span>] + arr[j];</span><br><span class="line">            f[j][j] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        ans += dp();</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2915-USACO08NOV-奶牛混合起来Mixed-Up-Cows"><a href="#P2915-USACO08NOV-奶牛混合起来Mixed-Up-Cows" class="headerlink" title="P2915 [USACO08NOV]奶牛混合起来Mixed Up Cows"></a><a href="https://www.luogu.org/problemnew/show/P2915" target="_blank" rel="noopener">P2915 [USACO08NOV]奶牛混合起来Mixed Up Cows</a></h3><p>R：看数据范围知道是状态压缩dp，注意(i & (1 << (j - 1))) == 0要括号，难度不大</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态压缩dp</span></span><br><span class="line"><span class="comment"> * dp[i][S]表示状态为s时i为结尾的排列数</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">17</span>, maxs = (<span class="number">1</span> << <span class="number">16</span>) + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> S[maxn], dp[maxn][maxs], N, K, up, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> S[i];</span><br><span class="line">    }</span><br><span class="line">    up = (<span class="number">1</span> << N) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= up; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">            <span class="keyword">if</span> ((i & (<span class="number">1</span> << (j - <span class="number">1</span>))) == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//前一个状态</span></span><br><span class="line">            <span class="keyword">int</span> preState = i - (<span class="number">1</span> << (j - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (preState == <span class="number">0</span>) {</span><br><span class="line">                dp[j][i] += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= N; k++) {</span><br><span class="line">                <span class="keyword">if</span> (k == j || <span class="built_in">abs</span>(S[k] - S[j]) <= K) {</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                dp[j][i] = dp[j][i] + dp[k][preState];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        ans += dp[i][up];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2618-数字工程"><a href="#P2618-数字工程" class="headerlink" title="P2618 数字工程"></a><a href="https://www.luogu.org/problemnew/show/P2618" target="_blank" rel="noopener">P2618 数字工程</a></h3><p>R:素数打表+动态规划，难度不大</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 素数打表</span></span><br><span class="line"><span class="comment"> * 素因子的问题，一般由小到大推，即遇到一个数，则依次乘以素数，这样可以将复杂度降到</span></span><br><span class="line"><span class="comment"> * log级别</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> visited[maxn], primes[maxn], len, N, dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">2</span>; i < maxn; i++) {</span><br><span class="line">        <span class="keyword">if</span> (visited[i]) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        primes[++len] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> j = i * i; j < maxn; j += i) {</span><br><span class="line">            visited[j] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &N) != EOF) {</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">            dp[i + <span class="number">1</span>] = min(dp[i + <span class="number">1</span>], dp[i] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= len; j++) {</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> nxt = primes[j] * i;</span><br><span class="line">                <span class="keyword">if</span> (nxt <= N) {</span><br><span class="line">                    dp[nxt] = min(dp[nxt], dp[i] + <span class="number">1</span>);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[N]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;P2530-SHOI2001-化工厂装箱员&quot;&gt;&lt;a href=&quot;#P2530-SHOI2001-化工厂装箱员&quot; class=&quot;headerlink&quot; title=&quot;P2530 [SHOI2001]化工厂装箱员&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.l
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="状压dp" scheme="http://yoursite.com/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="树形dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
      <category term="素数打表" scheme="http://yoursite.com/tags/%E7%B4%A0%E6%95%B0%E6%89%93%E8%A1%A8/"/>
    
      <category term="背包前K优解" scheme="http://yoursite.com/tags/%E8%83%8C%E5%8C%85%E5%89%8DK%E4%BC%98%E8%A7%A3/"/>
    
      <category term="田忌赛马" scheme="http://yoursite.com/tags/%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/"/>
    
      <category term="归并排序" scheme="http://yoursite.com/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.21</title>
    <link href="http://yoursite.com/2019/05/21/Algorithm0521/"/>
    <id>http://yoursite.com/2019/05/21/Algorithm0521/</id>
    <published>2019-05-21T11:45:08.050Z</published>
    <updated>2019-05-21T14:19:12.576Z</updated>
    
    <content type="html"><![CDATA[<h3 id="P2134-百日旅行"><a href="#P2134-百日旅行" class="headerlink" title="P2134 百日旅行"></a><a href="https://www.luogu.org/problemnew/show/P2134" target="_blank" rel="noopener">P2134 百日旅行</a></h3><p>R:斜率优化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这道题的转移方程很好想，很容易得到90分，还有10分需要使用单调队列才可以。</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200000</span> + <span class="number">10</span>;</span><br><span class="line">ll f[maxn], g[maxn], N, P, Q;</span><br><span class="line"><span class="keyword">int</span> gq[maxn], gqh, gqt;</span><br><span class="line">ll minq;</span><br><span class="line"><span class="comment">//gq存的是组成g下凸壳的index,gqh,gqt分别表示head,tail指针</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calcgq</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{ <span class="keyword">return</span> g[j] + P * j * j - <span class="number">2</span> * P * i * j + P * i * i; }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{ <span class="keyword">return</span> <span class="number">1.0</span> * (g[j] + P * j * j - g[i] - P * i * i) / (j - i); }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> P >> Q;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f)), <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(g));</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>, g[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始化队列</span></span><br><span class="line">    gq[<span class="number">1</span>] = <span class="number">0</span>, gqh = <span class="number">1</span>, gqt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        g[i] = minq + Q * i;</span><br><span class="line">        <span class="keyword">while</span> (gqh < gqt && calcgq(i, gq[gqh]) >= calcgq(i, gq[gqh + <span class="number">1</span>]))</span><br><span class="line">            gqh++;</span><br><span class="line">        f[i] = calcgq(i, gq[gqh]);</span><br><span class="line">        <span class="keyword">while</span> (gqh < gqt && slope(gq[gqt - <span class="number">1</span>], gq[gqt]) >= slope(gq[gqt - <span class="number">1</span>], i))</span><br><span class="line">            gqt--;</span><br><span class="line">        gq[++gqt] = i;</span><br><span class="line">        minq = min(minq, f[i] - Q * i);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << min(f[N], g[N]) << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P3195-HNOI2008-玩具装箱TOY"><a href="#P3195-HNOI2008-玩具装箱TOY" class="headerlink" title="P3195  HNOI2008 玩具装箱TOY"></a><a href="https://www.luogu.org/problemnew/show/P3195" target="_blank" rel="noopener">P3195  HNOI2008 玩具装箱TOY</a></h3><p>R:斜率优化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斜率优化dp,转移方程很简单</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[maxn], sum[maxn], N, L, c[maxn], q[maxn], h, t;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getx</span><span class="params">(<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> sum[j] + j + L + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sqr</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> f[j] + sqr(i - j - <span class="number">1</span> - L + sum[i] - sum[j]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> * (getx(j) * getx(j) + f[j] - getx(i) * getx(i) - f[i]) / (getx(j) - getx(i));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &N, &L);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &c[i]);</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + c[i];</span><br><span class="line">    }</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    q[<span class="number">1</span>] = <span class="number">0</span>, h = t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">while</span> (h < t && calc(i, q[h]) >= calc(i, q[h + <span class="number">1</span>]))</span><br><span class="line">            h++;</span><br><span class="line">        f[i] = calc(i, q[h]);</span><br><span class="line">        <span class="keyword">while</span> (h < t && slope(q[t - <span class="number">1</span>], q[t]) >= slope(q[t - <span class="number">1</span>], i))</span><br><span class="line">            t--;</span><br><span class="line">        q[++t] = i;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[N]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P4072-SDOI2016-征途"><a href="#P4072-SDOI2016-征途" class="headerlink" title="P4072 [SDOI2016]征途"></a><a href="https://www.luogu.org/problemnew/show/P4072" target="_blank" rel="noopener">P4072 [SDOI2016]征途</a></h3><p>R:斜率优化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment"> * 这题思路用的是斜率优化，虽然能AC，但是是我投机取巧的，我最后乘了</span></span><br><span class="line"><span class="comment"> * 一个K^2，然后四舍五入，不然会WA四个点，因为会造成精度损失。</span></span><br><span class="line"><span class="comment"> * f[i][j] = f[k][j-1] + (sum[i]-sum[k]-avg)^2 / K</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> f[maxn][maxn], avg, sum[maxn];</span><br><span class="line"><span class="keyword">int</span> N, K, q[maxn], h, t;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span> </span>{ <span class="keyword">return</span> x * x; }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">getx</span><span class="params">(<span class="keyword">int</span> k)</span> </span>{ <span class="keyword">return</span> avg + sum[k]; }</span><br><span class="line"><span class="comment">//从前k个数分成j-1段转移到前i个数分成j段的最小值</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>{ <span class="keyword">return</span> f[k][j - <span class="number">1</span>] + sqr(sum[i] - getx(k)) / K; }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> (f[k][j - <span class="number">1</span>] + getx(k) * getx(k) / K - f[i][j - <span class="number">1</span>] - getx(i) * getx(i) / K)</span><br><span class="line">        / (getx(k) - getx(i));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="built_in">cin</span> >> tmp;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + tmp;</span><br><span class="line">    }</span><br><span class="line">    avg = sum[N] * <span class="number">1.0</span> / K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= K; j++) {</span><br><span class="line">            f[i][j] = <span class="number">0x7fffffff</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= K; j++) {</span><br><span class="line">        h = t = <span class="number">1</span>;</span><br><span class="line">        q[<span class="number">1</span>] = j - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i <= N; i++) {</span><br><span class="line">            <span class="keyword">while</span> (h < t && calc(i, j, q[h]) >= calc(i, j, q[h + <span class="number">1</span>]))</span><br><span class="line">                h++;</span><br><span class="line">            f[i][j] = calc(i, j, q[h]);</span><br><span class="line">            <span class="keyword">while</span> (h < t && slope(q[t - <span class="number">1</span>], j, q[t]) >= slope(q[t - <span class="number">1</span>], j, i))</span><br><span class="line">                t--;</span><br><span class="line">            q[++t] = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = f[N][K] * K * K + <span class="number">0.5</span>;</span><br><span class="line">    <span class="built_in">cout</span> << res << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2112-鸿雁传书"><a href="#P2112-鸿雁传书" class="headerlink" title="P2112 鸿雁传书"></a><a href="https://www.luogu.org/problemnew/show/P2112" target="_blank" rel="noopener">P2112 鸿雁传书</a></h3><p>R:斜率优化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment"> * 以下是我用斜率优化dp的代码，跑的超级快，其实不用斜率优化也能AC</span></span><br><span class="line"><span class="comment"> * f[i][j] = f[k][j-1] + (sum[i]-sum[k]-avg)^2 / K</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> f[maxn][maxn], avg, sum[maxn];</span><br><span class="line"><span class="keyword">int</span> N, K, q[maxn], h, t;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span> </span>{ <span class="keyword">return</span> x * x; }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">getx</span><span class="params">(<span class="keyword">int</span> k)</span> </span>{ <span class="keyword">return</span> avg + sum[k]; }</span><br><span class="line"><span class="comment">//从前k个数分成j-1段转移到前i个数分成j段的最小值</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>{ <span class="keyword">return</span> f[k][j - <span class="number">1</span>] + sqr(sum[i] - getx(k)) / K; }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> (f[k][j - <span class="number">1</span>] + getx(k) * getx(k) / K - f[i][j - <span class="number">1</span>] - getx(i) * getx(i) / K)</span><br><span class="line">        / (getx(k) - getx(i));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">string</span> tmp;</span><br><span class="line">        <span class="built_in">cin</span> >> tmp;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + tmp.size();</span><br><span class="line">    }</span><br><span class="line">    avg = sum[N] * <span class="number">1.0</span> / K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= N; j++) {</span><br><span class="line">            f[i][j] = <span class="number">0x7fffffff</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= K; j++) {</span><br><span class="line">        h = t = <span class="number">1</span>;</span><br><span class="line">        q[<span class="number">1</span>] = j - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i <= N; i++) {</span><br><span class="line">            <span class="keyword">while</span> (h < t && calc(i, j, q[h]) >= calc(i, j, q[h + <span class="number">1</span>]))</span><br><span class="line">                h++;</span><br><span class="line">            f[i][j] = calc(i, j, q[h]);</span><br><span class="line">            <span class="keyword">while</span> (h < t && slope(q[t - <span class="number">1</span>], j, q[t]) >= slope(q[t - <span class="number">1</span>], j, i))</span><br><span class="line">                t--;</span><br><span class="line">            q[++t] = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.1lf\n"</span>, f[N][K]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2029-跳舞"><a href="#P2029-跳舞" class="headerlink" title="P2029 跳舞"></a><a href="https://www.luogu.org/problemnew/show/P2029" target="_blank" rel="noopener">P2029 跳舞</a></h3><p>R:滚动数组优化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment"> * 这道题转移方程很好想，但是复杂度O(N^3)，需要使用滚动数组保存max值降低到O(N^2)，挺有意思</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> N, T, S[maxn], B[maxn], f[maxn], mx[maxn], sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> S[i];</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + S[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> B[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(mx, ~<span class="number">0x3f</span>, <span class="keyword">sizeof</span>(mx));</span><br><span class="line">    mx[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//mx[j]表示前i个，j步的最大值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> remNum = mx[T];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = T; j >= <span class="number">1</span>; j--) {</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">1</span>) {</span><br><span class="line">                f[j] = max(remNum + S[i] - sum[i - <span class="number">1</span>], S[i] - sum[i - <span class="number">1</span>]);</span><br><span class="line">                mx[j] = max(mx[j], f[j] + sum[i]);</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (j == T) {</span><br><span class="line">                f[j] = mx[j - <span class="number">1</span>] + S[i] + B[i] - sum[i - <span class="number">1</span>];</span><br><span class="line">                mx[j] = max(mx[j], f[j] + sum[i]);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                f[j] = mx[j - <span class="number">1</span>] + S[i] - sum[i - <span class="number">1</span>];</span><br><span class="line">                mx[j] = max(mx[j], f[j] + sum[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= T; i++) {</span><br><span class="line">        ans = max(ans, f[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P1610-鸿山洞的灯"><a href="#P1610-鸿山洞的灯" class="headerlink" title="P1610 鸿山洞的灯"></a><a href="https://www.luogu.org/problemnew/show/P1610" target="_blank" rel="noopener">P1610 鸿山洞的灯</a></h3><p>R:这道题是普及-的题,爆零4次,共WA10次，没有找出错误原因。原有思路:f[i][0]表示关这个灯,f[i][1]表示开这个灯,f[i][1] = max(f[i-1][0],f[i-1][1]),f[i][0] = max(f[k][1]+i-k,f[i][0]),不知为何不对。以下是AC代码, f[i]表示i打开且i之前能够关闭的最多灯,f[i] = max(f[k]+i-k-1)</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * f[i]表示i打开且i之前能够关闭的最多灯</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn], N, dis, pos[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &N, &dis);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &pos[i]);</span><br><span class="line">    }</span><br><span class="line">    sort(pos + <span class="number">1</span>, pos + <span class="number">1</span> + N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j >= <span class="number">1</span>; j--) {</span><br><span class="line">            <span class="keyword">if</span> (pos[i] - pos[j] <= dis) {</span><br><span class="line">                f[i] = max(f[j] + (i - j - <span class="number">1</span>), f[i]);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[N]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;P2134-百日旅行&quot;&gt;&lt;a href=&quot;#P2134-百日旅行&quot; class=&quot;headerlink&quot; title=&quot;P2134 百日旅行&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2134&quot; ta
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="单调队列" scheme="http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="斜率优化" scheme="http://yoursite.com/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
      <category term="滚动数组" scheme="http://yoursite.com/tags/%E6%BB%9A%E5%8A%A8%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.20</title>
    <link href="http://yoursite.com/2019/05/20/Algorithm0520/"/>
    <id>http://yoursite.com/2019/05/20/Algorithm0520/</id>
    <published>2019-05-20T11:08:56.812Z</published>
    <updated>2019-05-20T11:21:11.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="P2921-USACO08DEC-在农场万圣节Trick-or-Treat-on-the-Farm"><a href="#P2921-USACO08DEC-在农场万圣节Trick-or-Treat-on-the-Farm" class="headerlink" title="P2921 [USACO08DEC]在农场万圣节Trick or Treat on the Farm"></a><a href="https://www.luogu.org/problemnew/show/P2921" target="_blank" rel="noopener">P2921 [USACO08DEC]在农场万圣节Trick or Treat on the Farm</a></h3><p>R:dfs+回溯+dp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 这道题仔细思考并不难，用的是dfs+记忆化搜索,如果一个点搜过，那么如果另一个搜索时遇到这个点</span></span><br><span class="line"><span class="comment"> * 就直接加上这个点的答案即可</span></span><br><span class="line"><span class="comment"> * 其中用到了引用用于回溯时的变量控制。</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn], nxt[maxn], N, length[maxn], ans[maxn], in_circle[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span>& circle, <span class="keyword">int</span>& overlap)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (in_circle[pos] || ans[pos]) {</span><br><span class="line">        overlap = pos;</span><br><span class="line">        length[pos] = l;</span><br><span class="line">        <span class="keyword">return</span> ans[pos];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (length[pos] != <span class="number">0</span>) {</span><br><span class="line">        ans[pos] = l - length[pos], overlap = pos, circle = <span class="number">1</span>, in_circle[pos] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> l - length[pos];</span><br><span class="line">    }</span><br><span class="line">    length[pos] = l;</span><br><span class="line">    <span class="comment">//递归</span></span><br><span class="line">    <span class="keyword">int</span> cr = dfs(nxt[pos], l + <span class="number">1</span>, circle, overlap);</span><br><span class="line">    <span class="comment">//回溯</span></span><br><span class="line">    <span class="keyword">if</span> (circle) {</span><br><span class="line">        ans[pos] = cr, in_circle[pos] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos == overlap) {</span><br><span class="line">            circle = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> cr;</span><br><span class="line">    }</span><br><span class="line">    ans[pos] = cr + length[overlap] - length[pos];</span><br><span class="line">    <span class="keyword">return</span> cr;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &nxt[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">if</span> (!ans[i]) {</span><br><span class="line">            <span class="keyword">int</span> circle = <span class="number">0</span>, overlap = <span class="number">-1</span>;</span><br><span class="line">            dfs(i, <span class="number">1</span>, circle, overlap);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P3842-TJOI2007-线段"><a href="#P3842-TJOI2007-线段" class="headerlink" title="P3842 [TJOI2007]线段"></a><a href="https://www.luogu.org/problemnew/show/P3842" target="_blank" rel="noopener">P3842 [TJOI2007]线段</a></h3><p>R:只和区间两个端点有关,f[i][0]表示走完i且停在左端点的最小值，f[i][1]类似。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这种带线段的dp,一般需要考虑线段的左右端点</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">2</span>], N, len[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">};</span><br><span class="line">Node nodes[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &nodes[i].x, &nodes[i].y);</span><br><span class="line">        len[i] = nodes[i].y - nodes[i].x;</span><br><span class="line">    }</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = nodes[<span class="number">1</span>].y - <span class="number">1</span> + len[<span class="number">1</span>];</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = nodes[<span class="number">1</span>].y - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i <= N; i++) {</span><br><span class="line">        f[i][<span class="number">0</span>] = min(f[i][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="built_in">abs</span>(nodes[i].y - nodes[i - <span class="number">1</span>].x) + len[i]);</span><br><span class="line">        f[i][<span class="number">0</span>] = min(f[i][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">1</span>] + <span class="built_in">abs</span>(nodes[i].y - nodes[i - <span class="number">1</span>].y) + len[i]);</span><br><span class="line">        f[i][<span class="number">1</span>] = min(f[i][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="built_in">abs</span>(nodes[i - <span class="number">1</span>].x - nodes[i].x) + len[i]);</span><br><span class="line">        f[i][<span class="number">1</span>] = min(f[i][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">1</span>] + <span class="built_in">abs</span>(nodes[i].x - nodes[i - <span class="number">1</span>].y) + len[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(f[N][<span class="number">0</span>] + N - nodes[N].x, f[N][<span class="number">1</span>] + N - nodes[N].y) + N - <span class="number">1</span>);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2015-二叉苹果树"><a href="#P2015-二叉苹果树" class="headerlink" title="P2015 二叉苹果树"></a><a href="https://www.luogu.org/problemnew/show/P2015" target="_blank" rel="noopener">P2015 二叉苹果树</a></h3><p>R:树上背包问题</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这道题是简单的树形dp</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> N, Q, tot, f[maxn][maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> v, w;</span><br><span class="line">    Node* next;</span><br><span class="line">};</span><br><span class="line">Node *h[maxn], pool[maxn << <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Node* p = &pool[tot++];</span><br><span class="line">    p->v = v, p->next = h[u], h[u] = p, p->w = w;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (h[r] == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="comment">//以root为根的树中保留i根枝条的最大苹果树为0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node* p = h[r]; p; p = p->next) {</span><br><span class="line">        <span class="keyword">if</span> (p->v != fa) {</span><br><span class="line">            <span class="keyword">int</span> cur = dfs(p->v, r);</span><br><span class="line">            sum += cur + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = sum; i >= <span class="number">1</span>; i--) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= min(cur, i - <span class="number">1</span>); j++) {</span><br><span class="line">                    f[r][i] = max(f[r][i], f[r][i - j - <span class="number">1</span>] + f[p->v][j] + p->w);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> Q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i < N; i++) {</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">cin</span> >> u >> v >> w;</span><br><span class="line">        add_edge(u, v, w), add_edge(v, u, w);</span><br><span class="line">    }</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> << f[<span class="number">1</span>][Q] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="简单题"><a href="#简单题" class="headerlink" title="简单题"></a>简单题</h2><h3 id="P3800-Power收集"><a href="#P3800-Power收集" class="headerlink" title="P3800 Power收集"></a><a href="https://www.luogu.org/problemnew/show/P3800" target="_blank" rel="noopener">P3800 Power收集</a></h3><p>R:和P2295类似，会一题就可以</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个题和打老鼠那题类似</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, K, T;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x, y, p;</span><br><span class="line">};</span><br><span class="line">Node nodes[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node& a, <span class="keyword">const</span> Node& b)</span> </span>{ <span class="keyword">return</span> a.x < b.x; }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &N, &M, &K, &T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= K; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &nodes[i].x, &nodes[i].y, &nodes[i].p);</span><br><span class="line">    }</span><br><span class="line">    sort(nodes + <span class="number">1</span>, nodes + <span class="number">1</span> + K, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= K; i++) {</span><br><span class="line">        f[i] = nodes[i].p;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j < i; j++) {</span><br><span class="line">            <span class="keyword">int</span> allt = nodes[i].x - nodes[j].x;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(nodes[i].y - nodes[j].y) <= T * allt) {</span><br><span class="line">                f[i] = max(f[i], f[j] + nodes[i].p);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= K; i++) {</span><br><span class="line">        ans = max(ans, f[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2233-HNOI2002-公交车路线"><a href="#P2233-HNOI2002-公交车路线" class="headerlink" title="P2233 [HNOI2002]公交车路线"></a><a href="https://www.luogu.org/problemnew/show/P2233" target="_blank" rel="noopener">P2233 [HNOI2002]公交车路线</a></h3><p>R:f[i][n]表示经过N次换乘到达i的方案数，注意转移的边界条件即可。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> N, f[<span class="number">9</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意边界条件，滚动数组优化</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= <span class="number">8</span>; j++) {</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">8</span>) {</span><br><span class="line">                f[j][<span class="number">2</span>] = (f[j - <span class="number">1</span>][<span class="number">1</span>] + f[<span class="number">1</span>][<span class="number">1</span>]) % mod;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">1</span>) {</span><br><span class="line">                f[j][<span class="number">2</span>] = (f[j + <span class="number">1</span>][<span class="number">1</span>] + f[<span class="number">8</span>][<span class="number">1</span>]) % mod;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">4</span>) {</span><br><span class="line">                f[j][<span class="number">2</span>] = f[j - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">6</span>) {</span><br><span class="line">                f[j][<span class="number">2</span>] = f[j + <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                f[j][<span class="number">2</span>] = (f[j - <span class="number">1</span>][<span class="number">1</span>] + f[j + <span class="number">1</span>][<span class="number">1</span>]) % mod;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= <span class="number">8</span>; j++) {</span><br><span class="line">            f[j][<span class="number">1</span>] = f[j][<span class="number">2</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << f[<span class="number">5</span>][<span class="number">2</span>] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;P2921-USACO08DEC-在农场万圣节Trick-or-Treat-on-the-Farm&quot;&gt;&lt;a href=&quot;#P2921-USACO08DEC-在农场万圣节Trick-or-Treat-on-the-Farm&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="dfs" scheme="http://yoursite.com/tags/dfs/"/>
    
      <category term="树形dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
      <category term="树形背包" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.19</title>
    <link href="http://yoursite.com/2019/05/19/Algorithm0519/"/>
    <id>http://yoursite.com/2019/05/19/Algorithm0519/</id>
    <published>2019-05-19T06:16:02.245Z</published>
    <updated>2019-05-19T10:43:51.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="P2258-子矩阵"><a href="#P2258-子矩阵" class="headerlink" title="P2258 子矩阵"></a><a href="https://www.luogu.org/problemnew/show/P2258" target="_blank" rel="noopener">P2258 子矩阵</a></h3><p>R:dfs+区间dp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 枚举R行，复杂度为C(16,8)=12870</span></span><br><span class="line"><span class="comment"> * dp是O(N^3)</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, chess[maxn][maxn], R, C, cache[maxn], vis[maxn], f[maxn][maxn], colsum[maxn], sub[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (n == R) {</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(colsum, <span class="number">0</span>, <span class="keyword">sizeof</span>(colsum));</span><br><span class="line">        <span class="built_in">memset</span>(sub, <span class="number">0</span>, <span class="keyword">sizeof</span>(sub));</span><br><span class="line">        <span class="comment">//计算枚举的行中，每列的差的绝对值之和。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i <= R; i++) {</span><br><span class="line">                colsum[j] += <span class="built_in">abs</span>(chess[cache[i]][j] - chess[cache[i - <span class="number">1</span>]][j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= R; k++) {</span><br><span class="line">                    sub[i][j] += <span class="built_in">abs</span>(chess[cache[k]][j] - chess[cache[k]][i]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//f[i][j]表示前i个选j个且第i列必须选的最小值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= C; j++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k < i; k++) {</span><br><span class="line">                    f[i][j] = min(f[i][j], f[k][j - <span class="number">1</span>] + sub[k][i] + colsum[i]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">            ans = min(ans, f[i][C]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s; i <= N; i++) {</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) {</span><br><span class="line">            cache[n + <span class="number">1</span>] = i;</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            dfs(i + <span class="number">1</span>, n + <span class="number">1</span>);</span><br><span class="line">            vis[i] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> >> N >> M >> R >> C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="built_in">cin</span> >> chess[i][j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P1472-奶牛家谱-Cow-Pedigrees"><a href="#P1472-奶牛家谱-Cow-Pedigrees" class="headerlink" title="P1472 奶牛家谱 Cow Pedigrees"></a><a href="https://www.luogu.org/problemnew/show/P1472" target="_blank" rel="noopener">P1472 奶牛家谱 Cow Pedigrees</a></h3><p>R:%%%%%%%%%%%%%%%%%%%%%%%%<br>table[i][j]表示深度为i、节点数为j的树的个数。根据给定的约束条件，j必须为奇数。你如何构造一棵树呢？当然是由更小的树来构造了。一棵深度为i、节点数为j的树可以由两个子树以及一个根结点构造而成。当i、j已经选定时，我们选择左子树的节点数k。</p><p>这样我们也就知道了右子树的节点数，即j-k-1。至于深度，至少要有一棵子树的深度为i-1才能使构造出的新树深度为i。有三种可能的情况：左子树深度为i-1 ，右子树深度小于i-1；右子树深度为i-1，左子树深度小于i-1；左右子树深度都为i-1。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dp[i][j]表示i个节点构成深度为j的数量</span></span><br><span class="line"><span class="comment"> * dp[i][j] = dp[m][i-1]*dp[i-m-1][1->i-2]</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">210</span>, maxk = <span class="number">105</span>, mod = <span class="number">9901</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxk], N, K, sum[maxn][maxk];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> K;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>, sum[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i += <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">2</span>; d <= K; d++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k < i - <span class="number">1</span>; k += <span class="number">2</span>) { <span class="comment">//左子树k个，右子树i - k -1个,</span></span><br><span class="line">                f[i][d] = (f[i][d] + f[k][d - <span class="number">1</span>] * sum[i - k - <span class="number">1</span>][d - <span class="number">2</span>]) % mod;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k < i - <span class="number">1</span>; k += <span class="number">2</span>) {</span><br><span class="line">                f[i][d] = (f[i][d] + f[i - k - <span class="number">1</span>][d - <span class="number">1</span>] * sum[k][d - <span class="number">2</span>]) % mod;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k < i - <span class="number">1</span>; k += <span class="number">2</span>) {</span><br><span class="line">                f[i][d] = (f[i][d] + f[k][d - <span class="number">1</span>] * f[i - k - <span class="number">1</span>][d - <span class="number">1</span>]) % mod;</span><br><span class="line">            }</span><br><span class="line">            sum[i][d] = (sum[i][d - <span class="number">1</span>] + f[i][d]) % mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << f[N][K] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2285-HNOI2004-打鼹鼠"><a href="#P2285-HNOI2004-打鼹鼠" class="headerlink" title="P2285 [HNOI2004]打鼹鼠"></a><a href="https://www.luogu.org/problemnew/show/P2285" target="_blank" rel="noopener">P2285 [HNOI2004]打鼹鼠</a></h3><p>R:dp[i][j][t]表示t时刻在i,j点的最大数量，这样转移方程很简单，但是时间、空间都要炸穿。将老鼠出现的时间顺序进行排列，dp[i] = max(dp[j]+1,dp[i]),这样就很简洁了。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>, maxm = <span class="number">10000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x, y, t;</span><br><span class="line">} nodes[maxm];</span><br><span class="line"><span class="keyword">int</span> N, M, f[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> next)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t = nodes[next].t - nodes[pre].t;</span><br><span class="line">    <span class="keyword">int</span> dis = <span class="built_in">abs</span>(nodes[next].x - nodes[pre].x) + <span class="built_in">abs</span>(nodes[pre].y - nodes[next].y);</span><br><span class="line">    <span class="keyword">if</span> (t >= dis) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &N, &M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &nodes[i].t, &nodes[i].x, &nodes[i].y);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j < i; j++) {</span><br><span class="line">            <span class="keyword">if</span> (check(j, i)) {</span><br><span class="line">                f[i] = max(f[j] + <span class="number">1</span>, f[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++)</span><br><span class="line">        ans = max(ans, f[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2836-加油问题"><a href="#P2836-加油问题" class="headerlink" title="P2836 加油问题"></a><a href="https://www.luogu.org/problemnew/show/P2836" target="_blank" rel="noopener">P2836 加油问题</a></h3><p>R:加油问题</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这道题想了好久，我真是菜鸡</span></span><br><span class="line"><span class="comment"> * f[i]表示从起点到达i节点，并在i节点充满油的最小消耗。转移的时候就遍历节点，油量小于1/2且能够到达</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">double</span> dis, contain, every, startCost;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">double</span> pos[maxn], spend[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> dis >> contain >> every >> startCost >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> pos[i] >> spend[i];</span><br><span class="line">    }</span><br><span class="line">    pos[N + <span class="number">1</span>] = dis;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>] = startCost * <span class="number">100</span> + <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j >= <span class="number">0</span>; j--) {</span><br><span class="line">            <span class="keyword">double</span> dis = pos[i] - pos[j];</span><br><span class="line">            <span class="keyword">double</span> consume = dis / every;</span><br><span class="line">            <span class="keyword">if</span> (consume > contain) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (consume >= contain / <span class="number">2</span>) {</span><br><span class="line">                f[i] = min((<span class="keyword">int</span>)(f[j] + <span class="number">200</span> + consume * spend[i] + <span class="number">0.5</span>), f[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i >= <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="keyword">double</span> dis = pos[N + <span class="number">1</span>] - pos[i];</span><br><span class="line">        <span class="keyword">double</span> consume = dis / every;</span><br><span class="line">        <span class="keyword">if</span> (consume > contain) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        ans = min(ans, f[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, ans * <span class="number">1.0</span> / <span class="number">100.0</span>);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;P2258-子矩阵&quot;&gt;&lt;a href=&quot;#P2258-子矩阵&quot; class=&quot;headerlink&quot; title=&quot;P2258 子矩阵&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2258&quot; targe
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="区间dp" scheme="http://yoursite.com/tags/%E5%8C%BA%E9%97%B4dp/"/>
    
      <category term="dfs" scheme="http://yoursite.com/tags/dfs/"/>
    
      <category term="加油问题" scheme="http://yoursite.com/tags/%E5%8A%A0%E6%B2%B9%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.18</title>
    <link href="http://yoursite.com/2019/05/18/Algorithm0518/"/>
    <id>http://yoursite.com/2019/05/18/Algorithm0518/</id>
    <published>2019-05-18T08:14:59.381Z</published>
    <updated>2019-05-19T06:16:19.158Z</updated>
    
    <content type="html"><![CDATA[<h3 id="P1854-花店橱窗布置"><a href="#P1854-花店橱窗布置" class="headerlink" title="P1854 花店橱窗布置"></a><a href="https://www.luogu.org/problemnew/show/P1854" target="_blank" rel="noopener">P1854 花店橱窗布置</a></h3><p>R:背包问题，动态规划中的路径记录</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * f[i][j]表示前i盆花放在前j个盆的最大值</span></span><br><span class="line"><span class="comment"> * f[i][j] = max(f[i-1][j],f[i-1][j-1]+收益)</span></span><br><span class="line"><span class="comment"> * 初始化f[0][0]=0,这道题的路径记录有点意思</span></span><br><span class="line"><span class="comment"> * 我的空间复杂度是O(N^3)，但是这是一个从无到有的过程</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn], F, V, A[maxn][maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> tail, a[maxn];</span><br><span class="line">} way[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">memset</span>(f, ~<span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="built_in">cin</span> >> F >> V;</span><br><span class="line">    <span class="comment">//第0棵花放到前V个花瓶的收益为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= V; i++) {</span><br><span class="line">        f[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= F; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= V; j++) {</span><br><span class="line">            <span class="built_in">cin</span> >> A[i][j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= F; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= V; j++) {</span><br><span class="line">            <span class="keyword">if</span> (f[i][j - <span class="number">1</span>] > f[i - <span class="number">1</span>][j - <span class="number">1</span>] + A[i][j]) {</span><br><span class="line">                f[i][j] = f[i][j - <span class="number">1</span>];</span><br><span class="line">                way[i][j] = way[i][j - <span class="number">1</span>];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>] + A[i][j];</span><br><span class="line">                way[i][j] = way[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                way[i][j].a[++way[i][j].tail] = j;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << f[F][V] << <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= F; i++) {</span><br><span class="line">        <span class="built_in">cout</span> << way[F][V].a[i] << <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P2890-USACO07OPEN-便宜的回文Cheapest-Palindrome"><a href="#P2890-USACO07OPEN-便宜的回文Cheapest-Palindrome" class="headerlink" title="P2890 [USACO07OPEN]便宜的回文Cheapest Palindrome"></a><a href="https://www.luogu.org/problemnew/show/P2890" target="_blank" rel="noopener">P2890 [USACO07OPEN]便宜的回文Cheapest Palindrome</a></h3><p>R:回文</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这道题和P3847，属于回文dp，f[i][j]表示i,j是回文串的最小花费</span></span><br><span class="line"><span class="comment"> * 如果ai==aj,则直接从i+1,j-1转移</span></span><br><span class="line"><span class="comment"> * 如果ai!=aj,则考虑在f[i+1][e]基础上删除e或增加e</span></span><br><span class="line"><span class="comment"> * 或者在[s][e-1]基础上删除s或者增加s</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> cost[<span class="number">27</span>][<span class="number">2</span>], N, M, f[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Min2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a < b ? a : b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Min4</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> Min2(a, b) < Min2(c, d) ? Min2(a, b) : Min2(c, d);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &M, &N);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &str[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="built_in">cin</span> >> c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &cost[c - <span class="string">'a'</span> + <span class="number">1</span>][<span class="number">0</span>], &cost[c - <span class="string">'a'</span> + <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s <= N; s++) {</span><br><span class="line">            <span class="keyword">int</span> e = s + i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (e > N)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (str[s] == str[e]) {</span><br><span class="line">                f[s][e] = f[s + <span class="number">1</span>][e - <span class="number">1</span>];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">int</span> r = str[e] - <span class="string">'a'</span> + <span class="number">1</span>, l = str[s] - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">                f[s][e] = Min4(f[s + <span class="number">1</span>][e] + cost[l][<span class="number">1</span>], f[s][e - <span class="number">1</span>] + cost[r][<span class="number">1</span>],</span><br><span class="line">                    f[s + <span class="number">1</span>][e] + cost[l][<span class="number">0</span>], f[s][e - <span class="number">1</span>] + cost[r][<span class="number">0</span>]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[<span class="number">1</span>][N]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P3847-TJOI2007-调整队形"><a href="#P3847-TJOI2007-调整队形" class="headerlink" title="P3847 [TJOI2007]调整队形"></a><a href="https://www.luogu.org/problemnew/show/P3847" target="_blank" rel="noopener">P3847 [TJOI2007]调整队形</a></h3><p>R:回文</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dp[i][j]表示使得区间[i,j]变为回文串的最小修改次数，注意[i,j]内的元素不一定是j-i+1了，但是对结果不影响</span></span><br><span class="line"><span class="comment"> * 如果ai==aj,则有i+1,j-1转移,如果ai!=aj,则有[i+1,j],[i,j-1],[i-1][j+1]中的最小值加一转移</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn], a[maxn], N;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &a[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s <= N; s++) {</span><br><span class="line">            <span class="keyword">int</span> e = s + i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (e > N) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (a[s] == a[e]) {</span><br><span class="line">                f[s][e] = f[s + <span class="number">1</span>][e - <span class="number">1</span>];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                f[s][e] = min(f[s + <span class="number">1</span>][e - <span class="number">1</span>], min(f[s][e - <span class="number">1</span>], f[s + <span class="number">1</span>][e])) + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[<span class="number">1</span>][N]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;P1854-花店橱窗布置&quot;&gt;&lt;a href=&quot;#P1854-花店橱窗布置&quot; class=&quot;headerlink&quot; title=&quot;P1854 花店橱窗布置&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P18
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="背包" scheme="http://yoursite.com/tags/%E8%83%8C%E5%8C%85/"/>
    
      <category term="路径记录" scheme="http://yoursite.com/tags/%E8%B7%AF%E5%BE%84%E8%AE%B0%E5%BD%95/"/>
    
      <category term="回文dp" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%96%87dp/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.17</title>
    <link href="http://yoursite.com/2019/05/17/Algorithm0517/"/>
    <id>http://yoursite.com/2019/05/17/Algorithm0517/</id>
    <published>2019-05-17T04:44:09.505Z</published>
    <updated>2019-05-17T05:50:11.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="难题"><a href="#难题" class="headerlink" title="难题"></a>难题</h2><h3 id="1、P1868-饥饿的奶牛"><a href="#1、P1868-饥饿的奶牛" class="headerlink" title="1、P1868 饥饿的奶牛"></a><a href="https://www.luogu.org/problemnew/show/P1868" target="_blank" rel="noopener">1、P1868 饥饿的奶牛</a></h3><p>R:如果f[i]从f[j] (j<=i)转移时，如果f[1]->f[i]具有单调性，那么二分查找可以降低复杂度。其次，遇到区间问题时，按某个端点排序可以有利于问题解决。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">150000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首先将节点按照右端点排序，f[i]表示前i堆草的最大值，f[i] = max(f[i-1],f[j]+吃这堆草)</span></span><br><span class="line"><span class="comment"> * 排序以及该转移方程可以保证f是不减的,因为即使两个区间a,b的右端点相同，左端点不同，那它们位置上</span></span><br><span class="line"><span class="comment"> * 是连续的，可以通过max这个转移过来。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> N, f[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">} nodes[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="keyword">inline</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node& a, <span class="keyword">const</span> Node& b)</span> </span>{ <span class="keyword">return</span> a.r < b.r; }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = x, pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l <= r) {</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nodes[mid].r < nodes[x].l) {</span><br><span class="line">            pos = mid, l = mid + <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &nodes[i].l, &nodes[i].r);</span><br><span class="line">    }</span><br><span class="line">    sort(nodes + <span class="number">1</span>, nodes + <span class="number">1</span> + N, cmp);</span><br><span class="line">    f[<span class="number">1</span>] = nodes[<span class="number">1</span>].r - nodes[<span class="number">1</span>].l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i <= N; i++) {</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> pos = find(i);</span><br><span class="line">        f[i] = max(f[pos] + nodes[i].r - nodes[i].l + <span class="number">1</span>, f[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[N]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、P1986-元旦晚会"><a href="#2、P1986-元旦晚会" class="headerlink" title="2、P1986 元旦晚会"></a><a href="https://www.luogu.org/problemnew/show/P1986" target="_blank" rel="noopener">2、P1986 元旦晚会</a></h3><p>R:贪心，类似P2887，更简单一些</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">30000</span> + <span class="number">10</span>, maxm = <span class="number">5005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> l, r, num;</span><br><span class="line">} nodes[maxm];</span><br><span class="line"><span class="keyword">int</span> N, M, visited[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node& a, <span class="keyword">const</span> Node& b)</span> </span>{ <span class="keyword">return</span> a.r < b.r; }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &N, &M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &nodes[i].l, &nodes[i].r, &nodes[i].num);</span><br><span class="line">    }</span><br><span class="line">    sort(nodes + <span class="number">1</span>, nodes + <span class="number">1</span> + M, cmp);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = nodes[i].r; j >= nodes[i].l; j--) {</span><br><span class="line">            <span class="keyword">if</span> (visited[j]) {</span><br><span class="line">                k++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (k > nodes[i].num) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = nodes[i].r; j >= nodes[i].l; j--) {</span><br><span class="line">            <span class="keyword">if</span> (k >= nodes[i].num) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!visited[j]) {</span><br><span class="line">                k++, ans++, visited[j] = <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、P4019-多边形染色"><a href="#3、P4019-多边形染色" class="headerlink" title="3、P4019 多边形染色"></a><a href="https://www.luogu.org/problemnew/show/P4019" target="_blank" rel="noopener">3、P4019 多边形染色</a></h3><p>R:环形dp的方法</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 通过这道题，我学习了环状dp的方法：枚举开头，在最后一个判断合法性。</span></span><br><span class="line"><span class="comment"> * dp[i][c] = sum(dp[i-1][k])</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50000</span> + <span class="number">10</span>, mod = <span class="number">987654321</span>;</span><br><span class="line"><span class="comment">//col表示节点不能涂的颜色</span></span><br><span class="line"><span class="keyword">int</span> N, M, C, dp[maxn][<span class="number">15</span>], uncol[maxn][<span class="number">15</span>], e[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &N, &M, &C);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">int</span> option, x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &option, &x, &y);</span><br><span class="line">        <span class="keyword">if</span> (option == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= C; j++) {</span><br><span class="line">                <span class="keyword">if</span> (j != y)</span><br><span class="line">                    uncol[x][j] = <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (option == <span class="number">2</span>) {</span><br><span class="line">            uncol[x][y] = <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            e[max(x, y)] = min(x, y);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> color = <span class="number">1</span>; color <= C; color++) {</span><br><span class="line">        <span class="keyword">if</span> (uncol[<span class="number">1</span>][color])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dp[<span class="number">1</span>][color] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i < N; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= C; j++) {</span><br><span class="line">                <span class="keyword">if</span> (uncol[i][j]) {</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (e[i]) {</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= C; k++) {</span><br><span class="line">                    <span class="keyword">if</span> (k != j) {</span><br><span class="line">                        dp[i][j] = (dp[i][j] + dp[i - <span class="number">1</span>][k]) % mod;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= C; i++) {</span><br><span class="line">            <span class="keyword">if</span> (uncol[N][i] || i == color) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (e[N]) {</span><br><span class="line">                dp[N][i] = dp[N - <span class="number">1</span>][i];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= C; k++) {</span><br><span class="line">                <span class="keyword">if</span> (k != i) {</span><br><span class="line">                    dp[N][i] = (dp[N][i] + dp[N - <span class="number">1</span>][k]) % mod;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= C; i++) {</span><br><span class="line">            ans = (ans + dp[N][i]) % mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、P2365-任务安排"><a href="#4、P2365-任务安排" class="headerlink" title="4、P2365 任务安排"></a><a href="https://www.luogu.org/problemnew/show/P2365" target="_blank" rel="noopener">4、P2365 任务安排</a></h3><p>R:区间dp的升级</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 以下是60分做法，原因是超时三个点，还有WA一个点，超时的原因是复杂度是O(N^3)</span></span><br><span class="line"><span class="comment"> * WA原因是int，但是内存不够开Long long</span></span><br><span class="line"><span class="comment"> * f[i][j]表示前i个任务分成j段的最小值，转移方程就很好像，复杂度是N^3</span></span><br><span class="line"><span class="comment"> * 其实我不用前i个任务分成几段，f[j]->f[i]转移只需要增加一个任务启动时间S即可。</span></span><br><span class="line"><span class="comment"> * 无后效性：动态规划法的最优解通常是由一系列最优决策组成的决策序列，</span></span><br><span class="line"><span class="comment"> * 最优子结构就是这些最优决策序列中的一个子序列，对于每个子序列再做</span></span><br><span class="line"><span class="comment"> * 最优决策会产生新的最优决策（子）序列，如果某个决策只受当前最优决</span></span><br><span class="line"><span class="comment"> * 策子序列的影响，而不受当前决策可能产生的新的最优决策子序列的影响，</span></span><br><span class="line"><span class="comment"> * 则可以理解这个最优决策具有无后效性。</span></span><br><span class="line"><span class="comment"> * f[j]表示前j个任务的最优值，F[i]就可以从当前的最优子序列[0,i-1]中选择转移且不会因为最新</span></span><br><span class="line"><span class="comment"> * 的子序列影响。注意每开一个段新的，就会产生使得后续的时间推迟S,所以加上(系数差)*S,再算上当前段任务完成的代价。</span></span><br><span class="line"><span class="comment"> * 还有斜率优化将复杂度降到O(N)，今天心情不好不学了。</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> N, S, t[maxn], a[maxn], f[maxn][maxn], sum[maxn], total_a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> t[i] >> a[i];</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + t[i];</span><br><span class="line">        total_a[i] = total_a[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= i; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k >= j - <span class="number">1</span>; k--) {</span><br><span class="line">                f[i][j] = min(f[i][j],</span><br><span class="line">                    f[k][j - <span class="number">1</span>] + (S * j + sum[i]) * (total_a[i] - total_a[k]));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        ans = min(ans, f[N][i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000</span> + <span class="number">10</span>;</span><br><span class="line">ll as[maxn], ts[maxn], a[maxn], t[maxn], f[maxn], N, S;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> t[i] >> a[i];</span><br><span class="line">        ts[i] = ts[i - <span class="number">1</span>] + t[i], as[i] = as[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (ri j = <span class="number">0</span>; j < i; j++) {</span><br><span class="line">            f[i] = min(f[i], f[j] + ts[i] * (as[i] - as[j]) + S * (as[N] - as[j]));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << f[N] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="常规题"><a href="#常规题" class="headerlink" title="常规题"></a>常规题</h2><h3 id="5、P2389-电脑班的裁员"><a href="#5、P2389-电脑班的裁员" class="headerlink" title="5、P2389 电脑班的裁员"></a><a href="https://www.luogu.org/problemnew/show/P2389" target="_blank" rel="noopener">5、P2389 电脑班的裁员</a></h3><p>R:平平无奇的区间dp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">int</span> K, score[maxn], dp[maxn][maxn], N, sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> score[i];</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + score[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(dp, ~<span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= N; i++) {</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= K; k++) {</span><br><span class="line">            <span class="keyword">if</span> (k > i) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            dp[i][k] = dp[i - <span class="number">1</span>][k];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j >= <span class="number">0</span>; j--) {</span><br><span class="line">                <span class="keyword">if</span> (j < k - <span class="number">1</span>) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                dp[i][k] = max(dp[j][k - <span class="number">1</span>] + sum[i] - sum[j], dp[i][k]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= K; j++) {</span><br><span class="line">            ans = max(ans, dp[i][j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6、P2340-奶牛会展"><a href="#6、P2340-奶牛会展" class="headerlink" title="6、P2340 奶牛会展"></a><a href="https://www.luogu.org/problemnew/show/P2340" target="_blank" rel="noopener">6、P2340 奶牛会展</a></h3><p>R:带有负值的dp，之前做过，所以算简单题</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> zero = (<span class="number">400</span> * <span class="number">1000</span> + <span class="number">10</span>), maxn = zero << <span class="number">1</span>, up = maxn - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn], clever[<span class="number">405</span>], love[<span class="number">405</span>], N;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> clever[i] >> love[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(dp, ~<span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[zero] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">if</span> (clever[i] < <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j - clever[i] <= up; j++) {</span><br><span class="line">                dp[j] = max(dp[j - clever[i]] + love[i], dp[j]);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = up; j >= clever[i]; j--) {</span><br><span class="line">                dp[j] = max(dp[j - clever[i]] + love[i], dp[j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = zero; i <= up; i++) {</span><br><span class="line">        <span class="keyword">if</span> (dp[i] >= <span class="number">0</span>) {</span><br><span class="line">            ans = max(ans, i - zero + dp[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;难题&quot;&gt;&lt;a href=&quot;#难题&quot; class=&quot;headerlink&quot; title=&quot;难题&quot;&gt;&lt;/a&gt;难题&lt;/h2&gt;&lt;h3 id=&quot;1、P1868-饥饿的奶牛&quot;&gt;&lt;a href=&quot;#1、P1868-饥饿的奶牛&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="迪杰斯特拉算法" scheme="http://yoursite.com/tags/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java程序提交Spark任务</title>
    <link href="http://yoursite.com/2019/05/16/Java0516/"/>
    <id>http://yoursite.com/2019/05/16/Java0516/</id>
    <published>2019-05-16T08:52:06.035Z</published>
    <updated>2019-05-18T08:14:32.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="1、java-cp-jar-xxx"><a href="#1、java-cp-jar-xxx" class="headerlink" title="1、java -cp *.jar xxx"></a>1、java -cp *.jar xxx</h3><p>报错：java.lang.SecurityException: Invalid signature file digest for Manifest main attributes.</p><p>解决方法：打开META-INF目录，将<em>.SF,</em>.DSA,*.RSA文件删除即可。</p><h3 id="Java程序调用Spark-Submit"><a href="#Java程序调用Spark-Submit" class="headerlink" title="Java程序调用Spark Submit"></a>Java程序调用Spark Submit</h3><p>1、首先引入maven依赖,需要注意的是将Spark中的hadoop去掉，然后引入自定义的hadoop版本。这个过程要对jar包进行更改,将maven reposity中的hadoop-common包中的core-default.xml添加以下语句,如果没有这个操作，可能会造成hdfs schema错误。<a href="https://www.cnblogs.com/TTyb/p/7283437.html" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!--- global properties --></span></span><br><span class="line"><span class="tag"><<span class="name">property</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">name</span>></span>fs.hdfs.impl<span class="tag"></<span class="name">name</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">value</span>></span>org.apache.hadoop.hdfs.DistributedFileSystem<span class="tag"></<span class="name">value</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">description</span>></span>The FileSystem for hdfs: uris.<span class="tag"></<span class="name">description</span>></span></span><br><span class="line"><span class="tag"></<span class="name">property</span>></span></span><br><span class="line"><span class="tag"><<span class="name">property</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">name</span>></span>fs.file.impl<span class="tag"></<span class="name">name</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">value</span>></span>org.apache.hadoop.fs.LocalFileSystem<span class="tag"></<span class="name">value</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">description</span>></span>The FileSystem for hdfs: uris.<span class="tag"></<span class="name">description</span>></span></span><br><span class="line"><span class="tag"></<span class="name">property</span>></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">modelVersion</span>></span>4.0.0<span class="tag"></<span class="name">modelVersion</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">groupId</span>></span>org.gzp.team<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">artifactId</span>></span>submit<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">version</span>></span>1.0<span class="tag"></<span class="name">version</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">properties</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">spark.version</span>></span>2.3.2<span class="tag"></<span class="name">spark.version</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">scala.compat.version</span>></span>2.11<span class="tag"></<span class="name">scala.compat.version</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">org.apache.hadoop.version</span>></span>2.7.7<span class="tag"></<span class="name">org.apache.hadoop.version</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">project.build.sourceEncoding</span>></span>UTF-8<span class="tag"></<span class="name">project.build.sourceEncoding</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">properties</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">dependencies</span>></span></span><br><span class="line">        <span class="comment"><!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core --></span></span><br><span class="line">        <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>org.apache.spark<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>spark-core_${scala.compat.version}<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">version</span>></span>${spark.version}<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">exclusions</span>></span></span><br><span class="line">                <span class="tag"><<span class="name">exclusion</span>></span></span><br><span class="line">                    <span class="tag"><<span class="name">groupId</span>></span>org.apache.hadoop<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">                    <span class="tag"><<span class="name">artifactId</span>></span>*<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">                <span class="tag"></<span class="name">exclusion</span>></span></span><br><span class="line">            <span class="tag"></<span class="name">exclusions</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>org.apache.hadoop<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>hadoop-client<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">version</span>></span>${org.apache.hadoop.version}<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"></span><br><span class="line">        <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>org.apache.spark<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>spark-sql_${scala.compat.version}<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">version</span>></span>${spark.version}<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"></<span class="name">dependencies</span>></span></span><br><span class="line">    <span class="comment"><!--超级jar包--></span></span><br><span class="line">    <span class="tag"><<span class="name">build</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">plugins</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">plugin</span>></span></span><br><span class="line">                <span class="tag"><<span class="name">groupId</span>></span>org.apache.maven.plugins<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">                <span class="tag"><<span class="name">artifactId</span>></span>maven-shade-plugin<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">                <span class="tag"><<span class="name">version</span>></span>3.1.0<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">                <span class="tag"><<span class="name">executions</span>></span></span><br><span class="line">                    <span class="tag"><<span class="name">execution</span>></span></span><br><span class="line">                        <span class="tag"><<span class="name">phase</span>></span>package<span class="tag"></<span class="name">phase</span>></span></span><br><span class="line">                        <span class="tag"><<span class="name">goals</span>></span></span><br><span class="line">                            <span class="tag"><<span class="name">goal</span>></span>shade<span class="tag"></<span class="name">goal</span>></span></span><br><span class="line">                        <span class="tag"></<span class="name">goals</span>></span></span><br><span class="line">                    <span class="tag"></<span class="name">execution</span>></span></span><br><span class="line">                <span class="tag"></<span class="name">executions</span>></span></span><br><span class="line"></span><br><span class="line">            <span class="tag"></<span class="name">plugin</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">plugins</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">build</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">project</span>></span></span><br></pre></td></tr></tbody></table></figure><p>2、调用SparkSubmit.main(args)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.deploy.SparkSubmit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KFSubmit</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SparkSubmit.main(args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3、调用java，注意里面有坑，需要提供两个虚拟机参数，否则会提交失败。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms256m -Xmx1024m -cp submit-1.0.jar KFSubmit --class RipleysKJavaExample  --conf "spark.executor.memory=1g" --conf "spark.driver.memory=1g" --master spark://master:7077 hdfs://master:9000/applications/origin_k.jar spark://master:7077 hdfs://master:9000/points/hubei.csv hdfs://master:9000/polygons/hubei.json true 10000 10000 10 Months 10 10 randomPermutation 1 70 true false false true hdfs://master:9000/ripleysk/try.json</span><br></pre></td></tr></tbody></table></figure><p>4、很重要的一点，二者的spark版本要一致！！！！否者会可能会出现提交但是不工作的问题。</p><p>5、还有一个坑：写文件到hdfs时出现以下错误:java.lang.IllegalArgumentException: Wrong FS://expected: file:///<br>解决方法是:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line"><span class="comment">//使用hadoop的core-site.xml中的fs.defaultFS参数，防止Wrong FS: hdfs:.......file:///  错误异常</span></span><br><span class="line">conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://192.168.184.99:9000"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="1、引入Maven依赖"><a href="#1、引入Maven依赖" class="headerlink" title="1、引入Maven依赖"></a>1、引入Maven依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">groupId</span>></span>com.github.ywilkof<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">artifactId</span>></span>spark-jobs-rest-client<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">version</span>></span>1.3.9<span class="tag"></<span class="name">version</span>></span></span><br><span class="line"><span class="tag"></<span class="name">dependency</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、向spark的Restful接口提交任务"><a href="#2、向spark的Restful接口提交任务" class="headerlink" title="2、向spark的Restful接口提交任务"></a>2、向spark的Restful接口提交任务</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">submitByRest</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>{</span><br><span class="line">    <span class="comment">//HttpServletRequest用来读取请求参数</span></span><br><span class="line">    SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd-HH-mm-ss"</span>);<span class="comment">//设置日期格式</span></span><br><span class="line">    String cur = df.format(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">//masterHost指定spark://master:7077中的IP</span></span><br><span class="line">    SparkRestClient sparkRestClient = SparkRestClient.builder()</span><br><span class="line">            .masterHost(masterHost)</span><br><span class="line">            .sparkVersion(sparkVersion)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">//程序需要用到的参数</span></span><br><span class="line">        String[] schemas = {</span><br><span class="line">                master,</span><br><span class="line">                <span class="string">"hdfs://192.168.200.149:9000/points/hubei.csv"</span></span><br><span class="line">                , <span class="string">"hdfs://192.168.200.149:9000/polygons/hubei.json"</span>,</span><br><span class="line">                <span class="string">"true"</span>, <span class="string">"5000"</span>, <span class="string">"100"</span>, <span class="string">"10"</span>, <span class="string">"Months"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>,</span><br><span class="line">                <span class="string">"randomPermutation"</span>, <span class="string">"1"</span>, <span class="string">"70"</span>, <span class="string">"true"</span>, <span class="string">"false"</span>,</span><br><span class="line">                <span class="string">"false"</span>, <span class="string">"true"</span>, defaultDFS,</span><br><span class="line">                resultDir + cur + <span class="string">".json"</span>};</span><br><span class="line">        List<String> arg = Arrays.asList(schemas);</span><br><span class="line">        <span class="keyword">final</span> String submissionId = sparkRestClient.prepareJobSubmit()</span><br><span class="line">                .appName(appName)</span><br><span class="line">                .appResource(appResource)</span><br><span class="line">                .mainClass(mainClass)</span><br><span class="line">                .appArgs(arg)</span><br><span class="line">                .withProperties()</span><br><span class="line">                .submit();</span><br><span class="line">                <span class="comment">//put方法将内存等信息上传</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        .put("spark.executor.memory", "1g")</span></span><br><span class="line"><span class="comment">                .put("spark.executor.cores", "8")</span></span><br><span class="line"><span class="comment">                .put("spark.executor.nums", "50")</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(submissionId);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="comment">//查询状态</span></span><br><span class="line">            <span class="keyword">final</span> DriverState driverState = sparkRestClient</span><br><span class="line">                    .checkJobStatus()</span><br><span class="line">                    .withSubmissionId(submissionId);</span><br><span class="line">            System.out.println(driverState);</span><br><span class="line">            <span class="keyword">if</span> (driverState.name().equals(DriverState.RUNNING.name())) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">        <span class="keyword">return</span> getResult(resultDir + cur + <span class="string">".json"</span>);</span><br><span class="line">    } <span class="keyword">catch</span> (FailedSparkRequestException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;h3 id=&quot;1、java-cp-jar-xxx&quot;&gt;&lt;a href=&quot;#1、java-cp-jar-xxx&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="Spark" scheme="http://yoursite.com/categories/Java/Spark/"/>
    
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.15</title>
    <link href="http://yoursite.com/2019/05/15/Algorithm0515/"/>
    <id>http://yoursite.com/2019/05/15/Algorithm0515/</id>
    <published>2019-05-15T08:07:31.550Z</published>
    <updated>2019-05-15T08:14:13.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="难题"><a href="#难题" class="headerlink" title="难题"></a>难题</h2><h3 id="1、P3004-USACO10DEC-宝箱Treasure-Chest"><a href="#1、P3004-USACO10DEC-宝箱Treasure-Chest" class="headerlink" title="1、P3004 [USACO10DEC]宝箱Treasure Chest"></a><a href="https://www.luogu.org/problemnew/show/P3004" target="_blank" rel="noopener">1、P3004 [USACO10DEC]宝箱Treasure Chest</a></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * f[i][j]表示区间[i,j]内先手所取的最大值</span></span><br><span class="line"><span class="comment"> * f[i][j] = sum[i,j] - min(f[i+1][j],f[i][j-1])</span></span><br><span class="line"><span class="comment"> * 内存限制64MB搞我用动态内存,压维我不太会</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> v[maxn], N, sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> v[i];</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + v[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span>** f = <span class="keyword">new</span> <span class="keyword">int</span>*[maxn];</span><br><span class="line">    <span class="keyword">int</span> maxlen = N + <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//f[1][0]表示f[1][1],f[2][0]表示f[2][2]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        f[i] = <span class="keyword">new</span> <span class="keyword">int</span>[maxlen];</span><br><span class="line">        maxlen--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        f[i][<span class="number">0</span>] = v[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len <= N; len++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s <= N; s++) {</span><br><span class="line">            <span class="keyword">int</span> e = s + len;</span><br><span class="line">            <span class="keyword">if</span> (e > N) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            f[s][len] = sum[e] - sum[s - <span class="number">1</span>] - min(f[s + <span class="number">1</span>][len - <span class="number">1</span>], f[s][len - <span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << f[<span class="number">1</span>][N - <span class="number">1</span>] << <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">delete</span>[] f[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">delete</span>[] f;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、P3110-USACO14DEC-驮运Piggy-Back"><a href="#2、P3110-USACO14DEC-驮运Piggy-Back" class="headerlink" title="2、P3110 [USACO14DEC]驮运Piggy Back"></a><a href="https://www.luogu.org/problemnew/show/P3110" target="_blank" rel="noopener">2、P3110 [USACO14DEC]驮运Piggy Back</a></h3><p>R:堆优化的迪杰斯特拉算法+动态规划。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果B+E>P，那么就不要相遇了，各走各的最短路径到达终点。</span></span><br><span class="line"><span class="comment"> * 如果B+E<P，那么可以枚举相遇点，计算B、E到相遇点的最短路径，最后求和。</span></span><br><span class="line"><span class="comment"> * 即使B+E<P，能保证相遇一定会比不相遇好吗？那就再和不相遇的比一下。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string"><int, int></span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">40000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> {</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Edge* next;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Edge *h[maxn], pool[maxn << <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, B, E, P, N, M, db[maxn], de[maxn], dp[maxn], visited[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Edge* p = &pool[tot++];</span><br><span class="line">    p->v = v, p->next = h[u], h[u] = p;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dj</span><span class="params">(<span class="keyword">int</span>* d, <span class="keyword">int</span> source)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//注意这里的优先队列使用方法</span></span><br><span class="line">    priority_queue<pii, <span class="built_in">vector</span><pii>, greater<pii>> q;</span><br><span class="line">    <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line">    d[source] = <span class="number">0</span>;</span><br><span class="line">    q.push(make_pair(<span class="number">0</span>, source));</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) {</span><br><span class="line">        pii top = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = top.second;</span><br><span class="line">        <span class="keyword">if</span> (visited[u]) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        visited[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (Edge* p = h[u]; p; p = p->next) {</span><br><span class="line">            <span class="keyword">int</span> v = p->v;</span><br><span class="line">            <span class="keyword">if</span> (d[v] > d[u] + <span class="number">1</span>) {</span><br><span class="line">                d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">                q.push(make_pair(d[v], v));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d"</span>, &B, &E, &P, &N, &M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &u, &v);</span><br><span class="line">        add_edge(u, v), add_edge(v, u);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(db, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(db)), <span class="built_in">memset</span>(de, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(de)), <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dj(db, <span class="number">1</span>), dj(de, <span class="number">2</span>), dj(dp, N);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> tmp = db[i] * B + dp[i] * P + de[i] * E;</span><br><span class="line">        ans = min(ans, tmp);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、P2887-USACO07NOV-防晒霜Sunscreen"><a href="#3、P2887-USACO07NOV-防晒霜Sunscreen" class="headerlink" title="3、P2887 [USACO07NOV]防晒霜Sunscreen"></a><a href="https://www.luogu.org/problemnew/show/P2887" target="_blank" rel="noopener">3、P2887 [USACO07NOV]防晒霜Sunscreen</a></h3><p>R:贪心</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2500</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不知道是哪路神仙贴了一个dp的标签，想了半天想不出来，于是用了贪心的方法。</span></span><br><span class="line"><span class="comment"> * 贪心的方法，首先按照线段左端点降序排序,对于防晒霜由大到小贪心。</span></span><br><span class="line"><span class="comment"> * 对于一个区间[min,max]，对于下一个奶牛,必有min(next)<min(cur)</span></span><br><span class="line"><span class="comment"> * 对于两瓶符合当前奶牛条件的防晒霜x,y,设x>y，对于下界是一定可以满足的，因为对下界降序排列了一次。</span></span><br><span class="line"><span class="comment"> * 所以需要对上界进行检验，共有三种情况</span></span><br><span class="line"><span class="comment"> * 1.x，y都能使用，即x<max(next)</span></span><br><span class="line"><span class="comment"> * 2.x,y都不能使用,即y>max(next)</span></span><br><span class="line"><span class="comment"> * 3.x不能使用,y能使用,即x>max(next),y<max(next)</span></span><br><span class="line"><span class="comment"> * 综上所述,把x给当前奶牛是最好的，如果把y取了，那么后面一个奶牛可能就无法晒太阳了。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cower</span> {</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">} cowers[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Protect</span> {</span></span><br><span class="line">    <span class="keyword">int</span> val, num;</span><br><span class="line">} protects[maxn];</span><br><span class="line"><span class="keyword">int</span> N, C;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">const</span> Cower& a, <span class="keyword">const</span> Cower& b)</span> </span>{ <span class="keyword">return</span> a.l > b.l; }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> Protect& a, <span class="keyword">const</span> Protect& b)</span> </span>{ <span class="keyword">return</span> a.val > b.val; };</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &N, &C);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &cowers[i].l, &cowers[i].r);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= C; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &protects[i].val, &protects[i].num);</span><br><span class="line">    }</span><br><span class="line">    sort(cowers + <span class="number">1</span>, cowers + <span class="number">1</span> + N, cmp1), sort(protects + <span class="number">1</span>, protects + <span class="number">1</span> + C, cmp2);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= C; j++) {</span><br><span class="line">            <span class="keyword">if</span> (protects[j].num > <span class="number">0</span> && protects[j].val >= cowers[i].l && protects[j].val <= cowers[i].r) {</span><br><span class="line">                sum++;</span><br><span class="line">                protects[j].num--;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//WA WA WA WA WA WA WA WA WA WA WA WA WA WA WA WA WA WA WA WA WA WA WA WA WA </span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;难题&quot;&gt;&lt;a href=&quot;#难题&quot; class=&quot;headerlink&quot; title=&quot;难题&quot;&gt;&lt;/a&gt;难题&lt;/h2&gt;&lt;h3 id=&quot;1、P3004-USACO10DEC-宝箱Treasure-Chest&quot;&gt;&lt;a href=&quot;#1、P3004-USACO10DEC
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="迪杰斯特拉算法" scheme="http://yoursite.com/tags/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.14</title>
    <link href="http://yoursite.com/2019/05/14/Algorithm0514/"/>
    <id>http://yoursite.com/2019/05/14/Algorithm0514/</id>
    <published>2019-05-14T06:22:19.341Z</published>
    <updated>2019-05-15T08:08:17.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="难题"><a href="#难题" class="headerlink" title="难题"></a>难题</h2><h3 id="1、P4060-Code-1-可做题"><a href="#1、P4060-Code-1-可做题" class="headerlink" title="1、P4060 [Code+#1]可做题"></a><a href="https://www.luogu.org/problemnew/show/P4060" target="_blank" rel="noopener">1、P4060 [Code+#1]可做题</a></h3><p>R:拆位dp、位运算、路径压缩</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*n<=1e9,m<=1e5</span></span><br><span class="line"><span class="comment">* 1、首先需要想到的是每位的位运算是独立的，所以拆位后位运算dp，这样算法复杂度是O(N)</span></span><br><span class="line"><span class="comment">* 2、N的范围太大，肯定超时，因此必须想方法进行路径压缩(例如青蛙过河那道题)。</span></span><br><span class="line"><span class="comment">* 3、f[i][0]表示前i个数进行异或，最后结果为0的最小和，f[i][1]同理。</span></span><br><span class="line"><span class="comment">* 4、假如[s,e]为未定义,则f[i][0] = min(f[i-1][0],f[i-1][1]),f[1][1]=min(f[i-1][0],f[i-1][1])+1<<p</span></span><br><span class="line"><span class="comment">所以如果有两个以上的未定义区，则只有最后一个会对下一个产生影响。</span></span><br><span class="line"><span class="comment">* 5、因为N的范围太大，所以需要注意离散化。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3</span> * <span class="number">1e5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> id, val;</span><br><span class="line">};</span><br><span class="line">Node nodes[maxn];</span><br><span class="line"><span class="keyword">int</span> scatter[maxn], N, M;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[maxn][<span class="number">2</span>], ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) {</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) {</span><br><span class="line">        r = <span class="number">10</span> * r + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f * r;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node& a, <span class="keyword">const</span> Node& b)</span> </span>{ <span class="keyword">return</span> a.id < b.id; }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    N = read(), M = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++)</span><br><span class="line">        nodes[i].id = read(), nodes[i].val = read();</span><br><span class="line">    sort(nodes + <span class="number">1</span>, nodes + <span class="number">1</span> + M, cmp);</span><br><span class="line">    N = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">if</span> (nodes[i].id - nodes[i - <span class="number">1</span>].id >= <span class="number">2</span>) {</span><br><span class="line">            scatter[++N] = <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        scatter[++N] = nodes[i].val;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p <= <span class="number">30</span>; p++) {</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>, f[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1e15</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">            <span class="keyword">if</span> (scatter[j] == <span class="number">-1</span>) {</span><br><span class="line">                f[j][<span class="number">0</span>] = min(f[j - <span class="number">1</span>][<span class="number">1</span>], f[j - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">                f[j][<span class="number">1</span>] = min(f[j - <span class="number">1</span>][<span class="number">0</span>] + (<span class="number">1</span> << p), f[j - <span class="number">1</span>][<span class="number">1</span>] + (<span class="number">1</span> << p));</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">if</span> (scatter[j] & (<span class="number">1</span> << p)) {</span><br><span class="line">                    f[j][<span class="number">1</span>] = f[j - <span class="number">1</span>][<span class="number">0</span>] + (<span class="number">1</span> << p);</span><br><span class="line">                    f[j][<span class="number">0</span>] = f[j - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    f[j][<span class="number">1</span>] = f[j - <span class="number">1</span>][<span class="number">1</span>] + (<span class="number">1</span> << p);</span><br><span class="line">                    f[j][<span class="number">0</span>] = f[j - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        ans += min(f[N][<span class="number">0</span>], f[N][<span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、P2079-烛光晚餐"><a href="#2、P2079-烛光晚餐" class="headerlink" title="2、P2079 烛光晚餐"></a><a href="https://www.luogu.org/problemnew/show/P2079" target="_blank" rel="noopener">2、P2079 烛光晚餐</a></h3><p>R:含有负值的多维背包,平移坐标轴。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出现负值的多维背包问题，坐标轴平移有点意思。 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">10</span>, maxv = <span class="number">500</span> + <span class="number">10</span>, maxf = <span class="number">500</span> + <span class="number">10</span>, up = (maxf << <span class="number">1</span>), down = maxf;</span><br><span class="line"><span class="keyword">int</span> ming[maxn], cost[maxn], red[maxn], N, V;</span><br><span class="line"><span class="keyword">int</span> dp[maxv][up + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">memset</span>(dp, ~<span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">cin</span> >> N >> V;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> cost[i] >> ming[i] >> red[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//坐标轴平移,由数据范围知：小明的总喜欢度在-500-500之间，所以坐标轴移500</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= V; i++) {</span><br><span class="line">        dp[i][down] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j >= cost[i]; j--) {</span><br><span class="line">            <span class="keyword">if</span> (ming[i] > <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = up; k >= ming[i]; k--) {</span><br><span class="line">                    dp[j][k] = max(dp[j][k], dp[j - cost[i]][k - ming[i]] + red[i]);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k - ming[i] <= up; k++) {</span><br><span class="line">                    dp[j][k] = max(dp[j][k], dp[j - cost[i]][k - ming[i]] + red[i]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i >= down; i--) {</span><br><span class="line">        ans = max(ans, dp[V][i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、P2732-商店购物-Shopping-Offers"><a href="#3、P2732-商店购物-Shopping-Offers" class="headerlink" title="3、P2732 商店购物 Shopping Offers"></a><a href="https://www.luogu.org/problemnew/show/P2732" target="_blank" rel="noopener">3、P2732 商店购物 Shopping Offers</a></h3><p>R:完全背包，方案可重用。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完全背包,dp[i][j][k][l][m]表示购买I,j,k...各第一第二类物品的最小代价，注意方案可以重复使用。</span></span><br><span class="line"><span class="comment"> *  */</span></span><br><span class="line"><span class="keyword">int</span> S, N, dp[<span class="number">6</span>][<span class="number">6</span>][<span class="number">6</span>][<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> len, c[<span class="number">5</span>], k[<span class="number">5</span>], price;</span><br><span class="line">} nodes[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> origin[<span class="number">1005</span>], num[<span class="number">1005</span>], kind[<span class="number">6</span>], tmp[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> method)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">0</span>; o < nodes[method].len; o++) {</span><br><span class="line">        <span class="keyword">int</span> k = nodes[method].c[o];</span><br><span class="line">        <span class="keyword">if</span> (tmp[k] < nodes[method].k[o]) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        tmp[k] -= nodes[method].k[o];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= S; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> nodes[i].len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j < nodes[i].len; j++) {</span><br><span class="line">            <span class="built_in">cin</span> >> nodes[i].c[j] >> nodes[i].k[j];</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cin</span> >> nodes[i].price;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> c, k, p;</span><br><span class="line">        <span class="built_in">cin</span> >> c >> k >> p;</span><br><span class="line">        origin[c] = p, num[c] = k, kind[i] = c;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp)), dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= num[kind[<span class="number">1</span>]]; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= num[kind[<span class="number">2</span>]]; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k <= num[kind[<span class="number">3</span>]]; k++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m <= num[kind[<span class="number">4</span>]]; m++) {</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n <= num[kind[<span class="number">5</span>]]; n++) {</span><br><span class="line">                        dp[i][j][k][m][n] = min(i * origin[kind[<span class="number">1</span>]] + j * origin[kind[<span class="number">2</span>]] + k * origin[kind[<span class="number">3</span>]] + m * origin[kind[<span class="number">4</span>]] + n * origin[kind[<span class="number">5</span>]], dp[i][j][k][m][n]);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">1</span>; o <= S; o++) {</span><br><span class="line">                            tmp[kind[<span class="number">1</span>]] = i, tmp[kind[<span class="number">2</span>]] = j, tmp[kind[<span class="number">3</span>]] = k, tmp[kind[<span class="number">4</span>]] = m, tmp[kind[<span class="number">5</span>]] = n;</span><br><span class="line">                            <span class="keyword">if</span> (check(o)) {</span><br><span class="line">                                dp[i][j][k][m][n] = min(dp[i][j][k][m][n], dp[tmp[kind[<span class="number">1</span>]]][tmp[kind[<span class="number">2</span>]]][tmp[kind[<span class="number">3</span>]]][tmp[kind[<span class="number">4</span>]]][tmp[kind[<span class="number">5</span>]]] + nodes[o].price);</span><br><span class="line">                            }</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << dp[num[kind[<span class="number">1</span>]]][num[kind[<span class="number">2</span>]]][num[kind[<span class="number">3</span>]]][num[kind[<span class="number">4</span>]]][num[kind[<span class="number">5</span>]]] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、P2295-MICE"><a href="#4、P2295-MICE" class="headerlink" title="4、P2295 MICE"></a><a href="https://www.luogu.org/problemnew/show/P2295" target="_blank" rel="noopener">4、P2295 MICE</a></h3><p>R:和常规的网格dp不同，与前前个状态位置有关。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意常规的地图dp都是dp[i][j] = dp[i-1][j],dp[i][j-1],但是这里还和前前个位置有关，所以要加一维表示从</span></span><br><span class="line"><span class="comment"> * 左还是上转移。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> chess[maxn][maxn], dp[maxn][maxn][<span class="number">2</span>], N, M;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &N, &M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &chess[i][j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = chess[<span class="number">1</span>][<span class="number">1</span>] + chess[<span class="number">2</span>][<span class="number">1</span>] + chess[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] = dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">if</span> (i * j == <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            dp[i][j][<span class="number">0</span>] = min(dp[i][j - <span class="number">1</span>][<span class="number">0</span>] + chess[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>][<span class="number">1</span>]) + chess[i + <span class="number">1</span>][j] + chess[i][j + <span class="number">1</span>];</span><br><span class="line">            dp[i][j][<span class="number">1</span>] = min(dp[i - <span class="number">1</span>][j][<span class="number">1</span>] + chess[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j][<span class="number">0</span>]) + chess[i + <span class="number">1</span>][j] + chess[i][j + <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(dp[N][M][<span class="number">0</span>], dp[N][M][<span class="number">1</span>]));</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5、P4925-1007-Scarlet的字符串不可能这么可爱"><a href="#5、P4925-1007-Scarlet的字符串不可能这么可爱" class="headerlink" title="5、P4925 [1007]Scarlet的字符串不可能这么可爱"></a><a href="https://www.luogu.org/problemnew/show/P4925" target="_blank" rel="noopener">5、P4925 [1007]Scarlet的字符串不可能这么可爱</a></h3><p>R:快速幂，推公式</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 推公式，快速幂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k, l, p, s, w, ans = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">quick_pow</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    a %= p;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>, k = a;</span><br><span class="line">    <span class="keyword">while</span> (b) {</span><br><span class="line">        <span class="keyword">if</span> (b & <span class="number">1</span>) {</span><br><span class="line">            res = (k * res) % p;</span><br><span class="line">        }</span><br><span class="line">        k = (k * k) % p;</span><br><span class="line">        b >>= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> k >> l >> p >> s >> w;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">if</span> (s) {</span><br><span class="line">            <span class="built_in">cout</span> << <span class="number">1</span> << <span class="built_in">endl</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">cout</span> << k << <span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="number">0</span>) {</span><br><span class="line">        ans = ((k % p) * ((k - <span class="number">1</span>) % p)) % p;</span><br><span class="line">        ans = (ans * quick_pow(k - <span class="number">2</span>, l - <span class="number">2</span>)) % p;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        ans = (k - <span class="number">1</span>) % p;</span><br><span class="line">        ans = (ans * quick_pow(k - <span class="number">2</span>, l - <span class="number">2</span>)) % p;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6、P3408-恋爱"><a href="#6、P3408-恋爱" class="headerlink" title="6、P3408 恋爱"></a><a href="https://www.luogu.org/problemnew/show/P3408" target="_blank" rel="noopener">6、P3408 恋爱</a></h3><p>R:树上贪心，简单题(要是lian ai有这么简单就好了)</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *树上贪心，不算难题，和dp无关</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Node* next;</span><br><span class="line">};</span><br><span class="line">Node *h[maxn], pool[maxn];</span><br><span class="line"><span class="keyword">int</span> tot, N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[maxn];</span><br><span class="line"><span class="keyword">double</span> T, C;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Node* p = &pool[tot++];</span><br><span class="line">    p->v = v, p->next = h[u], h[u] = p;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (h[u] == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span> A[u];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    priority_queue<<span class="keyword">long</span> <span class="keyword">long</span>, <span class="built_in">vector</span><<span class="keyword">long</span> <span class="keyword">long</span>>, greater<<span class="keyword">long</span> <span class="keyword">long</span>>> q;</span><br><span class="line">    <span class="keyword">for</span> (Node* p = h[u]; p; p = p->next) {</span><br><span class="line">        sum += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> v = dfs(p->v);</span><br><span class="line">        q.push(v);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">double</span> standard = A[u] * <span class="number">1.0</span> / T;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= sum; i++) {</span><br><span class="line">        cost += q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (i * <span class="number">1.0</span> / sum >= standard) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cost;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %lf %lf"</span>, &N, &T, &C);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> father;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %lld"</span>, &father, &A[i]);</span><br><span class="line">        add_edge(father, i);</span><br><span class="line">    }</span><br><span class="line">    A[<span class="number">0</span>] = C;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dfs(<span class="number">0</span>));</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;难题&quot;&gt;&lt;a href=&quot;#难题&quot; class=&quot;headerlink&quot; title=&quot;难题&quot;&gt;&lt;/a&gt;难题&lt;/h2&gt;&lt;h3 id=&quot;1、P4060-Code-1-可做题&quot;&gt;&lt;a href=&quot;#1、P4060-Code-1-可做题&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="拆位dp" scheme="http://yoursite.com/tags/%E6%8B%86%E4%BD%8Ddp/"/>
    
      <category term="位运算" scheme="http://yoursite.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="路径压缩" scheme="http://yoursite.com/tags/%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="负值背包" scheme="http://yoursite.com/tags/%E8%B4%9F%E5%80%BC%E8%83%8C%E5%8C%85/"/>
    
      <category term="多维完全背包" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BB%B4%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
    
      <category term="网格dp" scheme="http://yoursite.com/tags/%E7%BD%91%E6%A0%BCdp/"/>
    
      <category term="快速幂" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>svn服务器搭建记录</title>
    <link href="http://yoursite.com/2019/05/12/svn/"/>
    <id>http://yoursite.com/2019/05/12/svn/</id>
    <published>2019-05-12T03:30:25.144Z</published>
    <updated>2019-05-12T03:48:26.517Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装svn"><a href="#1、安装svn" class="headerlink" title="1、安装svn"></a>1、安装svn</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install subversion</span><br></pre></td></tr></tbody></table></figure><h3 id="2、创建目录"><a href="#2、创建目录" class="headerlink" title="2、创建目录"></a>2、创建目录</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下代码表示创建一个名为svn的根目录，GeoCommerce为具体项目名称。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/hjw/modules/</span><br><span class="line">mkdir svn</span><br><span class="line"><span class="built_in">cd</span> svn</span><br><span class="line">mkdir GeoCommerce</span><br><span class="line">chmod -R 777 /home/hjw/modules/svn/</span><br></pre></td></tr></tbody></table></figure><h3 id="3、创建版本仓库"><a href="#3、创建版本仓库" class="headerlink" title="3、创建版本仓库"></a>3、创建版本仓库</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo svnadmin create /home/hjw/modules/svn/GeoCommerce</span><br></pre></td></tr></tbody></table></figure><h3 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h3><h4 id="（1）svnserve-conf"><a href="#（1）svnserve-conf" class="headerlink" title="（1）svnserve.conf"></a>（1）svnserve.conf</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[general]</span><br><span class="line"><span class="comment"># 匿名用户不可读</span></span><br><span class="line">anon-access = none</span><br><span class="line"><span class="comment"># 权限用户可写</span></span><br><span class="line">auth-access = write</span><br><span class="line"><span class="comment"># 密码文件为passwd</span></span><br><span class="line">password-db = passwd</span><br><span class="line"><span class="comment"># 权限文件为authz</span></span><br><span class="line">authz-db = authz</span><br></pre></td></tr></tbody></table></figure><h4 id="（2）authz"><a href="#（2）authz" class="headerlink" title="（2）authz"></a>（2）authz</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[groups]</span><br><span class="line"><span class="comment"># 用户组</span></span><br><span class="line">admin=wjh,syz,mzp,pdh</span><br><span class="line">[/] <span class="comment"># 必须写/，因为这表示从仓库的目录开始设置权限</span></span><br><span class="line">@admin=rw <span class="comment"># admin组有rw(读写权限)，所有人有r(读权限)</span></span><br><span class="line">*=r</span><br></pre></td></tr></tbody></table></figure><h4 id="（3）passwd"><a href="#（3）passwd" class="headerlink" title="（3）passwd"></a>（3）passwd</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定密码</span></span><br><span class="line">[users]</span><br><span class="line">wjh=fool</span><br><span class="line">mzp=god</span><br><span class="line">syz=god</span><br><span class="line">pdh=god</span><br></pre></td></tr></tbody></table></figure><h3 id="5、启动svn服务"><a href="#5、启动svn服务" class="headerlink" title="5、启动svn服务"></a>5、启动svn服务</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo svnserve -d -r /home/hjw/modules/svn/ --listen-port 8888 <span class="comment"># 启动服务器</span></span><br><span class="line">-d 守护模式</span><br><span class="line">-r 指定svn版本库根目录</span><br><span class="line">--listen-port 指定端口</span><br></pre></td></tr></tbody></table></figure><h3 id="6、连接svn"><a href="#6、连接svn" class="headerlink" title="6、连接svn"></a>6、连接svn</h3><p>打开svn客户端，输入svn://ip:port/GeoCommerce</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、安装svn&quot;&gt;&lt;a href=&quot;#1、安装svn&quot; class=&quot;headerlink&quot; title=&quot;1、安装svn&quot;&gt;&lt;/a&gt;1、安装svn&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.11</title>
    <link href="http://yoursite.com/2019/05/11/Algorithm0511/"/>
    <id>http://yoursite.com/2019/05/11/Algorithm0511/</id>
    <published>2019-05-11T06:45:56.938Z</published>
    <updated>2019-05-11T06:59:36.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="素数打表"><a href="#素数打表" class="headerlink" title="素数打表"></a>素数打表</h2><h3 id="1、P1832-A-B-Problem（再升级）"><a href="#1、P1832-A-B-Problem（再升级）" class="headerlink" title="1、P1832 A+B Problem（再升级）"></a><a href="https://www.luogu.org/problemnew/show/P1832" target="_blank" rel="noopener">1、P1832 A+B Problem（再升级）</a></h3><p>R:这是一个完全背包问题，对我来说这题还是挺难的，在大神眼里我就是个垃圾。注意代码中的质数打表方法，挺有用的(古人云:暴力出奇迹，打表出省一，爆搜挂着机，骗分过样例)。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> visited[maxn], primes[maxn], len, N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_primes</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i < maxn; i++) {</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) {</span><br><span class="line">            primes[len++] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j < maxn; j += i) {</span><br><span class="line">                visited[j] = <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cnt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < len; i++) {</span><br><span class="line">        <span class="keyword">if</span> (primes[i] > N) {</span><br><span class="line">            <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    get_primes();</span><br><span class="line">    <span class="keyword">int</span> num = cnt();</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= num; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = primes[i]; j <= N; j++) {</span><br><span class="line">            dp[j] += dp[j - primes[i]];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << dp[N] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="常规题"><a href="#常规题" class="headerlink" title="常规题"></a>常规题</h2><h3 id="2、P1803-凌乱的yyy-线段覆盖"><a href="#2、P1803-凌乱的yyy-线段覆盖" class="headerlink" title="2、P1803 凌乱的yyy / 线段覆盖"></a><a href="https://www.luogu.org/problemnew/show/P1803" target="_blank" rel="noopener">2、P1803 凌乱的yyy / 线段覆盖</a></h3><p>R:贪心问题，按右端点排序，能放就放。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000000</span> + <span class="number">9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">};</span><br><span class="line">Node nodes[maxn];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node& a, <span class="keyword">const</span> Node& b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (a.r == b.r)</span><br><span class="line">        <span class="keyword">return</span> a.l > b.l;</span><br><span class="line">    <span class="keyword">return</span> a.r < b.r;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) {</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) {</span><br><span class="line">        r = <span class="number">10</span> * r + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f * r;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    N = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        nodes[i].l = read(), nodes[i].r = read();</span><br><span class="line">    }</span><br><span class="line">    sort(nodes + <span class="number">1</span>, nodes + <span class="number">1</span> + N, cmp);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, r = <span class="number">0</span>, pos = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (pos <= N) {</span><br><span class="line">        <span class="keyword">if</span> (nodes[pos].l >= r) {</span><br><span class="line">            ans += <span class="number">1</span>, r = nodes[pos].r;</span><br><span class="line">            pos++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            pos++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="难题"><a href="#难题" class="headerlink" title="难题"></a>难题</h2><h3 id="3、P1450-HAOI2008-硬币购物"><a href="#3、P1450-HAOI2008-硬币购物" class="headerlink" title="3、P1450 [HAOI2008]硬币购物"></a><a href="https://www.luogu.org/problemnew/show/P1450" target="_blank" rel="noopener">3、P1450 [HAOI2008]硬币购物</a></h3><p>R:见代码,f[i]表示价值为i的物品，不限各个硬币次数，现在强制第j种硬币至少用d[j]+1个，相当于(d[j]+1)<em>c[j]把它定死了，其余的就自由组合，所以不符合方案数为dp[s-(d[j]+1)</em>c[j]],剩下的就用容斥原理瞎搞，用的是位运算枚举子集，具体见代码。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line">ll f[maxn];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">5</span>], d[<span class="number">5</span>], tot, S;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意tmp>>1和tmp>>=1的区别！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对于每次询问，我们先假设答案为f[s]，但s>=(d[1]+1)*c[1]，即f[s]中包含了第一种硬币超过限制的情况。</span></span><br><span class="line"><span class="comment">要减去这部分。 </span></span><br><span class="line"><span class="comment">很明显，对于第一种硬币超过限制的情况，所用的第一种硬币数量>=d[1]+1。 </span></span><br><span class="line"><span class="comment">容易发现，总和为s，第一种硬币至少d[1]+1的情况个数，等于总和为s-(d[1]+1)*c[1]，硬币个数没有限制的情况个数！ </span></span><br><span class="line"><span class="comment">因为总和为s，第一种硬币至少d[1]+1的情况个数中，那d[1]+1个硬币是固定的，是不会变的，对于情况个数是不会有影响的。 </span></span><br><span class="line"><span class="comment">所以，我们将原先为f[s]的答案减去f[s-(d[1]+1)*c[1]]即可得出正确答案。 </span></span><br><span class="line"><span class="comment">这只是一种硬币超过限制的解决办法。对于两种硬币超过限制我们也同样这么减去</span></span><br><span class="line"><span class="comment">，但重复减去了一部分：那些两种硬币同时超过限制的情况。 </span></span><br><span class="line"><span class="comment">因此我们要加回两种硬币同时超过限制的情况</span></span><br><span class="line"><span class="comment">接着用位运算计算容斥原理的结果。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= <span class="number">4</span>; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &c[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &tot);</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= <span class="number">4</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = c[i]; j < maxn; j++) {</span><br><span class="line">            f[j] += f[j - c[i]];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (tot--) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= <span class="number">4</span>; i++) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &d[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &S);</span><br><span class="line">        ll ans = f[S];</span><br><span class="line">        <span class="comment">//容斥原理,奇减偶加</span></span><br><span class="line">        <span class="comment">//总共16位数，即0001-1111所以从1枚举到15</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= <span class="number">15</span>; i++) {</span><br><span class="line">            <span class="keyword">int</span> tmp = i, now = S;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">1</span>; <span class="comment">//表示末尾第几位，例如1111,首先是1111，右移一位变为0111，j加一</span></span><br><span class="line">            <span class="keyword">int</span> k = <span class="number">0</span>; <span class="comment">//用来判断i的二进制表示中共有几个1，用异或来表示</span></span><br><span class="line">            <span class="comment">//k开始为0，与1异或一次就为1，再与1异或一次变为0，所以可以表达1的个数</span></span><br><span class="line">            <span class="keyword">for</span> (; tmp; tmp >>= <span class="number">1</span>, j++) {</span><br><span class="line">                <span class="keyword">if</span> (tmp & <span class="number">1</span>) { <span class="comment">//最后一位</span></span><br><span class="line">                    now -= (d[j] + <span class="number">1</span>) * c[j];</span><br><span class="line">                    k ^= <span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (now >= <span class="number">0</span>) {</span><br><span class="line">                k ? ans -= f[now] : ans += f[now];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;素数打表&quot;&gt;&lt;a href=&quot;#素数打表&quot; class=&quot;headerlink&quot; title=&quot;素数打表&quot;&gt;&lt;/a&gt;素数打表&lt;/h2&gt;&lt;h3 id=&quot;1、P1832-A-B-Problem（再升级）&quot;&gt;&lt;a href=&quot;#1、P1832-A-B-Problem（再
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="质数打表" scheme="http://yoursite.com/tags/%E8%B4%A8%E6%95%B0%E6%89%93%E8%A1%A8/"/>
    
      <category term="容斥原理" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.10</title>
    <link href="http://yoursite.com/2019/05/10/Algorithm0510/"/>
    <id>http://yoursite.com/2019/05/10/Algorithm0510/</id>
    <published>2019-05-10T08:02:01.922Z</published>
    <updated>2019-05-11T06:45:24.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规题"><a href="#常规题" class="headerlink" title="常规题"></a>常规题</h2><h3 id="1、P1336-最佳课题选择"><a href="#1、P1336-最佳课题选择" class="headerlink" title="1、P1336 最佳课题选择"></a><a href="https://www.luogu.org/problemnew/show/P1336" target="_blank" rel="noopener">1、P1336 最佳课题选择</a></h3><p>R:多重背包</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> A, B;</span><br><span class="line">} nodes[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">25</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> nodes[i].A >> nodes[i].B;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="comment">//前i个课题选0篇的时间均为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i <= M; i++) {</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k <= j; k++) {</span><br><span class="line">                dp[i][j] = min(dp[i - <span class="number">1</span>][j - k] + nodes[i].A * (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">pow</span>(k, nodes[i].B), dp[i][j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << dp[M][N] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、P1359-租用游艇"><a href="#2、P1359-租用游艇" class="headerlink" title="2、P1359 租用游艇"></a><a href="https://www.luogu.org/problemnew/show/P1359" target="_blank" rel="noopener">2、P1359 租用游艇</a></h3><p>R：水题</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn], r[maxn][maxn], N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i < N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">            <span class="built_in">cin</span> >> r[i][j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k < i; k++) {</span><br><span class="line">            f[i] = min(f[i], f[k] + r[k][i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << f[N] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、P1364-医院设置"><a href="#3、P1364-医院设置" class="headerlink" title="3、P1364 医院设置"></a><a href="https://www.luogu.org/problemnew/show/P1364" target="_blank" rel="noopener">3、P1364 医院设置</a></h3><p>R:水题</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Node* next;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> tot, N, people[maxn], ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">Node *h[maxn], pool[maxn << <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Node* p = &pool[tot++];</span><br><span class="line">    p->v = v, p->next = h[u], h[u] = p;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> f, <span class="keyword">int</span> dis, <span class="keyword">int</span>& sum)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    sum += people[s] * dis;</span><br><span class="line">    <span class="keyword">for</span> (Node* p = h[s]; p; p = p->next) {</span><br><span class="line">        <span class="keyword">int</span> v = p->v;</span><br><span class="line">        <span class="keyword">if</span> (v != f) {</span><br><span class="line">            dfs(v, s, dis + <span class="number">1</span>, sum);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">cin</span> >> people[i] >> l >> r;</span><br><span class="line">        <span class="keyword">if</span> (l != <span class="number">0</span>)</span><br><span class="line">            add_edge(i, l), add_edge(l, i);</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="number">0</span>)</span><br><span class="line">            add_edge(i, r), add_edge(r, i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        dfs(i, <span class="number">0</span>, <span class="number">0</span>, sum);</span><br><span class="line">        ans = min(ans, sum);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="有意思的题"><a href="#有意思的题" class="headerlink" title="有意思的题"></a>有意思的题</h2><h3 id="4、P1351-联合权值"><a href="#4、P1351-联合权值" class="headerlink" title="4、P1351 联合权值"></a><a href="https://www.luogu.org/problemnew/show/P1351" target="_blank" rel="noopener">4、P1351 联合权值</a></h3><p>R:n个节点n-1条边，说明这个图可以表示成一棵树，注意dfs的细节(带上祖父节点,不走回父节点)，此外需要注意同余定理中负数的处理，统计方法很简单，不多写。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200000</span> + <span class="number">10</span>, mod = <span class="number">10007</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Node* next;</span><br><span class="line">};</span><br><span class="line">Node *h[maxn], pool[maxn << <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, total_sum, mx, w[maxn], N;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Node* p = &pool[tot++];</span><br><span class="line">    p->v = v, p->next = h[u], h[u] = p;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//son father grandfather</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> f, <span class="keyword">int</span> g)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, sq = <span class="number">0</span>, first = <span class="number">0</span>, second = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node* p = h[s]; p != <span class="literal">NULL</span>; p = p->next) {</span><br><span class="line">        <span class="keyword">int</span> v = p->v;</span><br><span class="line">        <span class="keyword">if</span> (v == f) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        sum = (w[v] + sum) % mod;</span><br><span class="line">        sq = (w[v] * w[v] + sq) % mod;</span><br><span class="line">        <span class="comment">//求第一第二的权值</span></span><br><span class="line">        <span class="keyword">if</span> (w[v] >= first) {</span><br><span class="line">            second = first, first = w[v];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (w[v] > second) {</span><br><span class="line">                second = w[v];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        dfs(v, s, f);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//注意这里负数的解决方法</span></span><br><span class="line">    total_sum = ((sum * sum - sq + mod) % mod + total_sum) % mod;</span><br><span class="line">    mx = max(mx, first * second);</span><br><span class="line">    total_sum = (<span class="number">2</span> * w[s] * w[g] + total_sum) % mod;</span><br><span class="line">    mx = max(w[s] * w[g], mx);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i < N; i++) {</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> >> u >> v;</span><br><span class="line">        add_edge(u, v), add_edge(v, u);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> w[i];</span><br><span class="line">    }</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> << mx << <span class="string">" "</span> << total_sum << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5、P1439-【模板】最长公共子序列"><a href="#5、P1439-【模板】最长公共子序列" class="headerlink" title="5、P1439 【模板】最长公共子序列"></a><a href="https://www.luogu.org/problemnew/show/P1439" target="_blank" rel="noopener">5、P1439 【模板】最长公共子序列</a></h3><p>R:将LCS问题转为LIS问题，降低复杂度，将3，4，1，2，5离散化为3-1,4-2,1-3,2-4,5-5<br>根据这个键值对关系将序列后进行替换<br>1,2,3,4,5 -> 3,4,1,2,5<br>然后对其求最长不下降序列即可</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> seg[maxn << <span class="number">2</span>], s1[maxn], s2[maxn], N, id[maxn], ans = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> lower_bound(v.begin(), v.end(), x) - v.begin() + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> C, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//这里我原来写l==pos,害我WA成傻逼</span></span><br><span class="line">    <span class="keyword">if</span> (r == l) {</span><br><span class="line">        seg[cur] = max(seg[cur], C);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos <= mid) {</span><br><span class="line">        update(pos, C, l, mid, cur << <span class="number">1</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        update(pos, C, mid + <span class="number">1</span>, r, cur << <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    seg[cur] = max(seg[cur << <span class="number">1</span>], seg[cur << <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (L > R) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (l >= L && r <= R) {</span><br><span class="line">        <span class="keyword">return</span> seg[cur];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid >= L) {</span><br><span class="line">        mx = max(mx, query(L, R, l, mid, cur << <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (mid < R) {</span><br><span class="line">        mx = max(mx, query(L, R, mid + <span class="number">1</span>, r, cur << <span class="number">1</span> | <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> mx;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> s1[i];</span><br><span class="line">        id[s1[i]] = i;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="built_in">cin</span> >> tmp;</span><br><span class="line">        s2[i] = id[tmp];</span><br><span class="line">        v.push_back(s2[i]);</span><br><span class="line">    }</span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> idx = getid(s2[i]);</span><br><span class="line">        <span class="keyword">int</span> pre = query(<span class="number">1</span>, idx, <span class="number">1</span>, N, <span class="number">1</span>);</span><br><span class="line">        update(idx, pre + <span class="number">1</span>, <span class="number">1</span>, N, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << query(<span class="number">1</span>, N, <span class="number">1</span>, N, <span class="number">1</span>) << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h2><h3 id="6、P1440-求m区间内的最小值"><a href="#6、P1440-求m区间内的最小值" class="headerlink" title="6、P1440 求m区间内的最小值"></a><a href="https://www.luogu.org/problemnew/show/P1440" target="_blank" rel="noopener">6、P1440 求m区间内的最小值</a></h3><p>R:这道题可以用线段树O(Nlog2N)，但是卡常，用了单调队列O(N)</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线段树版本</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//这道题要吸氧气才能通过</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> seg[maxn << <span class="number">2</span>], f[maxn], N, M;</span><br><span class="line"><span class="comment">//快读</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) {</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) {</span><br><span class="line">        r = <span class="number">10</span> * r + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f * r;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> c, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l == r) {</span><br><span class="line">        seg[cur] = c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos <= mid) {</span><br><span class="line">        update(pos, c, l, mid, cur << <span class="number">1</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        update(pos, c, mid + <span class="number">1</span>, r, cur << <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    seg[cur] = min(seg[cur << <span class="number">1</span>], seg[cur << <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (L > R) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (l >= L && r <= R) {</span><br><span class="line">        <span class="keyword">return</span> seg[cur];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>, mn = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid >= L) {</span><br><span class="line">        mn = min(mn, query(l, mid, L, R, cur << <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (mid < R) {</span><br><span class="line">        mn = min(mn, query(mid + <span class="number">1</span>, r, L, R, cur << <span class="number">1</span> | <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> mn;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    N = read(), M = read();</span><br><span class="line">    <span class="built_in">memset</span>(seg, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(seg));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        f[i] = read();</span><br><span class="line">        update(i, f[i], <span class="number">1</span>, N, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> s = i - M;</span><br><span class="line">        s = max(s, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(<span class="number">1</span>, N, s, i - <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//单调队列版本</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//cout,cin非常非常非常慢，我用cin/cout费时4400ms，改成scanf后只有1500ms</span></span><br><span class="line"><span class="comment">//单调队列还是挺好打的，线段树要吸氧才能过</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn], N, M;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> index, value;</span><br><span class="line">};</span><br><span class="line"><span class="built_in">deque</span><Node> q;</span><br><span class="line"><span class="comment">//去除过期数据</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> start = now - M;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) {</span><br><span class="line">        Node head = q.front();</span><br><span class="line">        <span class="keyword">if</span> (head.index < start) {</span><br><span class="line">            q.pop_front();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (q.empty()) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> q.front().value;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Node nN;</span><br><span class="line">    nN.index = idx, nN.value = val;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty() && q.back().value >= val) {</span><br><span class="line">        q.pop_back();</span><br><span class="line">    }</span><br><span class="line">    q.push_back(nN);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &N, &M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &f[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        remove(i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get());</span><br><span class="line">        insert(i, f[i]);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="错题"><a href="#错题" class="headerlink" title="错题"></a>错题</h2><h3 id="7、P1353-USACO08JAN-跑步Running"><a href="#7、P1353-USACO08JAN-跑步Running" class="headerlink" title="7、P1353 [USACO08JAN]跑步Running"></a><a href="https://www.luogu.org/problemnew/show/P1353" target="_blank" rel="noopener">7、P1353 [USACO08JAN]跑步Running</a></h3><p>R:这道题我不会写转移方程，f[i][j]表示i分钟j疲劳度的最远距离<br>如果i这个时刻在休息，那么dp[i+j][0] = max(dp[i-1][j+1],dp[i+j][0])<br>如果i这个时刻在跑步, 那么dp[i][j] = max(dp[i-1][j-1],dp[i][j])<br>如果j为0，上一个时刻在休息，这个时刻可能还在休息，且疲劳度为0，所以dp[i][0] = max(dp[i][0],dp[i-1][0])</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxt = <span class="number">10005</span>, maxm = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxt][maxm], N, M, d[maxt];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> d[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">if</span> (i + j <= N) {</span><br><span class="line">                dp[i + j][<span class="number">0</span>] = max(dp[i - <span class="number">1</span>][j + <span class="number">1</span>], dp[i + j][<span class="number">0</span>]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) {</span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i][j]);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + d[i], dp[i][j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << dp[N][<span class="number">0</span>] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常规题&quot;&gt;&lt;a href=&quot;#常规题&quot; class=&quot;headerlink&quot; title=&quot;常规题&quot;&gt;&lt;/a&gt;常规题&lt;/h2&gt;&lt;h3 id=&quot;1、P1336-最佳课题选择&quot;&gt;&lt;a href=&quot;#1、P1336-最佳课题选择&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="LCS-&gt;LIS" scheme="http://yoursite.com/tags/LCS-LIS/"/>
    
      <category term="单调队列" scheme="http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.09</title>
    <link href="http://yoursite.com/2019/05/09/Algorithm0509/"/>
    <id>http://yoursite.com/2019/05/09/Algorithm0509/</id>
    <published>2019-05-09T13:39:58.443Z</published>
    <updated>2019-05-09T14:34:06.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规题"><a href="#常规题" class="headerlink" title="常规题"></a>常规题</h2><h3 id="1、P1279-字串距离"><a href="#1、P1279-字串距离" class="headerlink" title="1、P1279 字串距离"></a><a href="https://www.luogu.org/problemnew/show/P1279" target="_blank" rel="noopener">1、P1279 字串距离</a></h3><p>R:最大公共子序列的变形。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">2005</span>], b[<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> d, dp[<span class="number">2005</span>][<span class="number">2005</span>], alen, blen;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Min</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> n1 > n2 ? n2 : n1;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Abs</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> n1 > n2 ? n1 - n2 : n2 - n1;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &a[<span class="number">1</span>]), <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &b[<span class="number">1</span>]), <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &d), alen = <span class="built_in">strlen</span>(a + <span class="number">1</span>), blen = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= blen; i++) {</span><br><span class="line">        dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] + d;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= alen; i++) {</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + d;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= alen; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= blen; j++) {</span><br><span class="line">            dp[i][j] = Min(Min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + Abs(a[i], b[j]), dp[i - <span class="number">1</span>][j] + d), dp[i][j - <span class="number">1</span>] + d);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[alen][blen]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="难题"><a href="#难题" class="headerlink" title="难题"></a>难题</h2><h3 id="2、P1281-书的复制"><a href="#2、P1281-书的复制" class="headerlink" title="2、P1281 书的复制"></a><a href="https://www.luogu.org/problemnew/show/P1281" target="_blank" rel="noopener">2、P1281 书的复制</a></h3><p>R:首先连续的书本分给一本人，因此想到区间dp,这题非常类似<a href="https://www.luogu.org/problemnew/show/P1103" target="_blank" rel="noopener">P1103 书本整理</a>,dp[i][k]表示前i本书分给k个人的最小值。另外一个注意点就是输出序列时由后向前，贪心输出。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn], N, K, f[maxn], sum[maxn], ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i >= <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="keyword">int</span> tmp = sum[r] - sum[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (tmp > ans || i == <span class="number">0</span>) {</span><br><span class="line">            Print(i);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i + <span class="number">1</span>, r);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N >> K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> f[i];</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + f[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= K; k++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j >= <span class="number">0</span>; j--) {</span><br><span class="line">                <span class="keyword">if</span> (j < k - <span class="number">1</span>) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                dp[i][k] = min(dp[i][k], max(dp[j][k - <span class="number">1</span>], sum[i] - sum[j]));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    ans = dp[N][K];</span><br><span class="line">    Print(N);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、P1283-平板涂色"><a href="#3、P1283-平板涂色" class="headerlink" title="3、P1283 平板涂色"></a><a href="https://www.luogu.org/problemnew/show/P1283" target="_blank" rel="noopener">3、P1283 平板涂色</a></h3><p>R:状态压缩dp，dp[i][s]表示到达i节点，状态为s的最小次数，可以由dp[k][前一个状态(即将第i位置为0)]转移来，且必须保证前一个状态已经将第i个上面的矩形全部涂色。<br>位运算有很多细节容易出错：<br>1.将某位置为0(必须保证原来为1)：state -= (1<<j)<br>2.将某位置为1(必须保证原来为0)：state += (1<<j)<br>3.判断某位是否为1：state & (1<<j) == 0 ? 0:1</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码有优化的地方，但是我太懒了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs = (<span class="number">1</span> << <span class="number">16</span>) + <span class="number">10</span>, maxn = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxs], N, all, ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> xl, yl, xr, yr, color;</span><br><span class="line">};</span><br><span class="line">Node nodes[maxn];</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> edge[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">overlap</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> !(y1 <= x2 || y2 <= x1);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">isSet</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> (state & (<span class="number">1</span> << (n - <span class="number">1</span>))) != <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getbit</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> state & (<span class="number">1</span> << (n - <span class="number">1</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    all = <span class="number">2</span> << (N - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> nodes[i].yl >> nodes[i].xl >> nodes[i].yr >> nodes[i].xr >> nodes[i].color;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">            <span class="keyword">if</span> (j == i) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (nodes[j].yr == nodes[i].yl && overlap(nodes[i].xl, nodes[i].xr, nodes[j].xl, nodes[j].xr)) {</span><br><span class="line">                edge[i].push_back(j);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i < all; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">            <span class="keyword">if</span> (!getbit(i, j)) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> preState = i - (<span class="number">1</span> << (j - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">bool</span> isOk = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k < (<span class="keyword">int</span>)edge[j].size(); k++) {</span><br><span class="line">                <span class="keyword">if</span> (!isSet(preState, edge[j][k])) {</span><br><span class="line">                    isOk = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!isOk) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= N; k++) {</span><br><span class="line">                <span class="keyword">if</span> (k == j || preState & (<span class="number">1</span> << (k - <span class="number">1</span>)) == <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (nodes[k].color == nodes[j].color && preState != <span class="number">0</span>) {</span><br><span class="line">                    dp[j][i] = min(dp[j][i], dp[k][preState]);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    dp[j][i] = min(dp[j][i], dp[k][preState] + <span class="number">1</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        ans = min(ans, dp[i][all - <span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、P1310-表达式的值"><a href="#4、P1310-表达式的值" class="headerlink" title="4、P1310 表达式的值"></a><a href="https://www.luogu.org/problemnew/show/P1310" target="_blank" rel="noopener">4、P1310 表达式的值</a></h3><p>R:中位表达式转后缀表达式：<br>1.遇到(直接入符号栈，遇到数字直接输出。<br>2.遇到),则一直出栈，直到出现(，(不输出，其他符号都输出。<br>3.遇到其他符号，则一直出栈直到遇到优先级比它小的，最后自己入栈,注意(除了 )以外都不会出栈。<br>4.如果到达输出结尾，则一直出符号栈。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200000</span> + <span class="number">10</span>, MOD = <span class="number">10007</span>;</span><br><span class="line"><span class="keyword">int</span> N, f[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N >> s;</span><br><span class="line">    <span class="built_in">stack</span><<span class="keyword">char</span>> stk;</span><br><span class="line">    <span class="built_in">string</span> expr = <span class="string">"."</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < (<span class="keyword">int</span>)s.size(); i++) {</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'('</span> || s[i] == <span class="string">'*'</span>) {</span><br><span class="line">            stk.push(s[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">')'</span>) {</span><br><span class="line">            <span class="keyword">while</span> (!stk.empty()) {</span><br><span class="line">                <span class="keyword">char</span> top = stk.top();</span><br><span class="line">                stk.pop();</span><br><span class="line">                <span class="keyword">if</span> (top == <span class="string">'('</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    expr += top;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'+'</span>) {</span><br><span class="line">            <span class="keyword">while</span> (!stk.empty() && stk.top() == <span class="string">'*'</span>) {</span><br><span class="line">                expr += stk.top();</span><br><span class="line">                stk.pop();</span><br><span class="line">            }</span><br><span class="line">            stk.push(<span class="string">'+'</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'*'</span> || s[i] == <span class="string">'+'</span>)</span><br><span class="line">            expr += <span class="string">'.'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (!stk.empty()) {</span><br><span class="line">        expr += stk.top();</span><br><span class="line">        stk.pop();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < (<span class="keyword">int</span>)expr.size(); i++) {</span><br><span class="line">        <span class="keyword">if</span> (expr[i] == <span class="string">'.'</span>) {</span><br><span class="line">            j++;</span><br><span class="line">            f[<span class="number">0</span>][j] = <span class="number">1</span>, f[<span class="number">1</span>][j] = <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (expr[i] == <span class="string">'*'</span>) {</span><br><span class="line">            j--;</span><br><span class="line">            f[<span class="number">0</span>][j] = (f[<span class="number">0</span>][j + <span class="number">1</span>] * f[<span class="number">1</span>][j] + f[<span class="number">0</span>][j] * f[<span class="number">1</span>][j + <span class="number">1</span>] + f[<span class="number">0</span>][j] * f[<span class="number">0</span>][j + <span class="number">1</span>]) % MOD;</span><br><span class="line">            f[<span class="number">1</span>][j] = (f[<span class="number">1</span>][j] * f[<span class="number">1</span>][j + <span class="number">1</span>]) % MOD;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            j--;</span><br><span class="line">            f[<span class="number">1</span>][j] = (f[<span class="number">0</span>][j] * f[<span class="number">1</span>][j + <span class="number">1</span>] + f[<span class="number">0</span>][j + <span class="number">1</span>] * f[<span class="number">1</span>][j] + f[<span class="number">1</span>][j] * f[<span class="number">1</span>][j + <span class="number">1</span>]) % MOD;</span><br><span class="line">            f[<span class="number">0</span>][j] = (f[<span class="number">0</span>][j] * f[<span class="number">0</span>][j + <span class="number">1</span>]) % MOD;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << f[<span class="number">0</span>][j] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常规题&quot;&gt;&lt;a href=&quot;#常规题&quot; class=&quot;headerlink&quot; title=&quot;常规题&quot;&gt;&lt;/a&gt;常规题&lt;/h2&gt;&lt;h3 id=&quot;1、P1279-字串距离&quot;&gt;&lt;a href=&quot;#1、P1279-字串距离&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="区间dp" scheme="http://yoursite.com/tags/%E5%8C%BA%E9%97%B4dp/"/>
    
      <category term="表达式转换" scheme="http://yoursite.com/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="状压dp" scheme="http://yoursite.com/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.07</title>
    <link href="http://yoursite.com/2019/05/07/Algorithm0507/"/>
    <id>http://yoursite.com/2019/05/07/Algorithm0507/</id>
    <published>2019-05-07T10:17:57.142Z</published>
    <updated>2019-05-09T13:39:42.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规题"><a href="#常规题" class="headerlink" title="常规题"></a>常规题</h2><h3 id="1、P1216-IOI1994-USACO1-5-数字三角形-Number-Triangles"><a href="#1、P1216-IOI1994-USACO1-5-数字三角形-Number-Triangles" class="headerlink" title="1、P1216 [IOI1994][USACO1.5]数字三角形 Number Triangles"></a><a href="https://www.luogu.org/problemnew/show/P1216" target="_blank" rel="noopener">1、P1216 [IOI1994][USACO1.5]数字三角形 Number Triangles</a></h3><p>R:水题</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn], dp[maxn][maxn], N;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= i; j++) {</span><br><span class="line">            <span class="built_in">cin</span> >> f[i][j];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (i == N) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">                dp[N][j] = f[N][j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i >= <span class="number">1</span>; i--) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= i; j++) {</span><br><span class="line">            dp[i][j] = max(dp[i + <span class="number">1</span>][j + <span class="number">1</span>], dp[i + <span class="number">1</span>][j]) + f[i][j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << dp[<span class="number">1</span>][<span class="number">1</span>] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="难题"><a href="#难题" class="headerlink" title="难题"></a>难题</h2><h3 id="2、P1169-ZJOI2007-棋盘制作"><a href="#2、P1169-ZJOI2007-棋盘制作" class="headerlink" title="2、P1169 [ZJOI2007]棋盘制作"></a><a href="https://www.luogu.org/problemnew/show/P1169" target="_blank" rel="noopener">2、P1169 [ZJOI2007]棋盘制作</a></h3><p>R:悬线法</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> rec_ans = <span class="number">1</span>, square_ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> up[maxn][maxn], L[maxn][maxn], R[maxn][maxn], f[maxn][maxn], N, M;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="built_in">cin</span> >> f[i][j];</span><br><span class="line">            L[i][j] = R[i][j] = j;</span><br><span class="line">            up[i][j] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//预处理L</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">if</span> (f[i][j - <span class="number">1</span>] != f[i][j]) {</span><br><span class="line">                L[i][j] = L[i][j - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//预处理R</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = M - <span class="number">1</span>; j >= <span class="number">1</span>; j--) {</span><br><span class="line">            <span class="keyword">if</span> (f[i][j + <span class="number">1</span>] != f[i][j]) {</span><br><span class="line">                R[i][j] = R[i][j + <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">if</span> (f[i][j] != f[i - <span class="number">1</span>][j] && i != <span class="number">1</span>) {</span><br><span class="line">                up[i][j] = up[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">                L[i][j] = max(L[i - <span class="number">1</span>][j], L[i][j]);</span><br><span class="line">                R[i][j] = min(R[i - <span class="number">1</span>][j], R[i][j]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> width = R[i][j] - L[i][j] + <span class="number">1</span>;</span><br><span class="line">            rec_ans = max(rec_ans, width * up[i][j]);</span><br><span class="line">            square_ans = max(square_ans, min(width, up[i][j]) * min(width, up[i][j]));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << square_ans << <span class="built_in">endl</span></span><br><span class="line">         << rec_ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、P1233-木棍加工"><a href="#3、P1233-木棍加工" class="headerlink" title="3、P1233 木棍加工"></a><a href="https://www.luogu.org/problemnew/show/P1233" target="_blank" rel="noopener">3、P1233 木棍加工</a></h3><p>R:模拟+Dilworth定理+单调上升子序列</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动模拟一下，保证单调性，先按照l降序排列</span></span><br><span class="line"><span class="comment"> * l相同按照w降序排列，由dilworth定理可知，求w的最长上升子序列长度即可。</span></span><br><span class="line"><span class="comment"> * 求最长上升子序列可以用O(nlog2N)算法，但是我太懒了没用，因为N太小了只有5000.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> l, w;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node& a, <span class="keyword">const</span> Node& b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (a.l == b.l)</span><br><span class="line">        <span class="keyword">return</span> a.w > b.w;</span><br><span class="line">    <span class="keyword">return</span> a.l > b.l;</span><br><span class="line">}</span><br><span class="line">Node nodes[maxn];</span><br><span class="line"><span class="keyword">int</span> N, dp[maxn], ans = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> nodes[i].l >> nodes[i].w;</span><br><span class="line">    }</span><br><span class="line">    sort(nodes + <span class="number">1</span>, nodes + <span class="number">1</span> + N, cmp);</span><br><span class="line">    <span class="comment">//O(N2)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j < i; j++) {</span><br><span class="line">            <span class="keyword">if</span> (nodes[j].w < nodes[i].w) {</span><br><span class="line">                dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        ans = max(ans, dp[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、P1270-“访问”美术馆"><a href="#4、P1270-“访问”美术馆" class="headerlink" title="4、P1270 “访问”美术馆"></a><a href="https://www.luogu.org/problemnew/show/P1270" target="_blank" rel="noopener">4、P1270 “访问”美术馆</a></h3><p>R:树形dp入门题,注意走回来的时间，因此时间*2</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 如果是0，则分为两个走廊。注意走回来的时间也要算进去</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> l, r, time, num;</span><br><span class="line">};</span><br><span class="line">Node nodes[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> cnt, S, dp[<span class="number">105</span>][<span class="number">605</span>],root;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>& x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    <span class="built_in">cin</span> >> t >> n;</span><br><span class="line">    x = ++cnt;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">0</span>) {</span><br><span class="line">        nodes[x].num = n, nodes[x].time = <span class="number">2</span> * t;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    nodes[x].time = <span class="number">2</span> * t;</span><br><span class="line">    build(nodes[x].l);</span><br><span class="line">    build(nodes[x].r);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> (nodes[x].l == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = nodes[x].time; j <= S; j++) {</span><br><span class="line">            dp[x][j] = max((j - nodes[x].time) / <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (dp[x][j] > nodes[x].num) {</span><br><span class="line">                dp[x][j] = nodes[x].num;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    dfs(nodes[x].l);</span><br><span class="line">    dfs(nodes[x].r);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nodes[x].time; i <= S; i++) {</span><br><span class="line">        <span class="keyword">int</span> rest = i - nodes[x].time;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= rest; j++) {</span><br><span class="line">            dp[x][i] = max(dp[x][i], dp[nodes[x].l][j] + dp[nodes[x].r][rest - j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> S;</span><br><span class="line">    S--;</span><br><span class="line">    build(root);</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> << dp[<span class="number">1</span>][S] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5、P1271-聚会的快乐"><a href="#5、P1271-聚会的快乐" class="headerlink" title="5、P1271 聚会的快乐"></a><a href="https://www.luogu.org/problemnew/show/P1271" target="_blank" rel="noopener">5、P1271 聚会的快乐</a></h3><p>R:树形dp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> son[<span class="number">110</span>];</span><br><span class="line"><span class="built_in">map</span><<span class="built_in">string</span>, <span class="keyword">int</span>> id;</span><br><span class="line"><span class="keyword">int</span> n, st, f[<span class="number">110</span>][<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> {</span></span><br><span class="line">    <span class="built_in">string</span> s, fa;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">} a[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    f[x][<span class="number">0</span>] = <span class="number">0</span>, f[x][<span class="number">1</span>] = a[x].w;</span><br><span class="line">    <span class="keyword">if</span> (son[x].size() == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < son[x].size(); i++) {</span><br><span class="line">        dp(son[x][i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < son[x].size(); i++) {</span><br><span class="line">        sum += max(f[son[x][i]][<span class="number">0</span>], f[son[x][i]][<span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">    f[x][<span class="number">0</span>] = sum;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < son[x].size(); i++) {</span><br><span class="line">        sum += f[son[x][i]][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">    f[x][<span class="number">1</span>] += sum;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= n; i++)</span><br><span class="line">        <span class="built_in">cin</span> >> a[i].s >> a[i].w >> a[i].fa, id[a[i].s] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= n; i++)</span><br><span class="line">        son[id[a[i].fa]].push_back(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!id[a[i].fa]) {</span><br><span class="line">            st = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    dp(st);</span><br><span class="line">    <span class="built_in">cout</span> << max(f[st][<span class="number">0</span>], f[st][<span class="number">1</span>])<<<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6、P1273-有线电视网"><a href="#6、P1273-有线电视网" class="headerlink" title="6、P1273 有线电视网"></a><a href="https://www.luogu.org/problemnew/show/P1273" target="_blank" rel="noopener">6、P1273 有线电视网</a></h3><p>R:树状背包,滚动数组,dp[v][k]表示v节点为k个用户提供服务的最大收益。<br>dp[v][k] = max(dp[v][k],dp[v][k-j] + dp[son][j]-cost)(son为v的某个子节点)<br>三维数组时dp[i][v][k]表示v的前i棵子树选择k个节点的最大收益<br>dp[i][v][k] = max(dp[i-1][v][k-j]+dp[son的总儿子数][son][j]-cost,dp[i-1][v][k]),因此只需要枚举k时由大到小枚举，就可以节省一维的空间。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn], pay[maxn], tot, N, M, du[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> len, v;</span><br><span class="line">    Node* next;</span><br><span class="line">};</span><br><span class="line">Node *h[maxn], pool[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Node* p = &pool[tot++];</span><br><span class="line">    p->v = v, p->len = len, p->next = h[u], h[u] = p;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (h[x] == <span class="literal">NULL</span>) {</span><br><span class="line">        dp[x][<span class="number">1</span>] = pay[x];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp[x], ~<span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp[x]));</span><br><span class="line">    dp[x][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node* p = h[x]; p; p = p->next) {</span><br><span class="line">        <span class="keyword">int</span> v = p->v;</span><br><span class="line">        <span class="keyword">int</span> t = dfs(v);</span><br><span class="line">        sum += t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = sum; i >= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= t; j++) {</span><br><span class="line">                <span class="keyword">if</span> (i >= j) {</span><br><span class="line">                    dp[x][i] = max(dp[x][i], dp[v][j] + dp[x][i - j] - p->len);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N - M; i++) {</span><br><span class="line">        <span class="keyword">int</span> K;</span><br><span class="line">        <span class="built_in">cin</span> >> K;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= K; j++) {</span><br><span class="line">            <span class="keyword">int</span> a, c;</span><br><span class="line">            <span class="built_in">cin</span> >> a >> c;</span><br><span class="line">            add_edge(i, a, c);</span><br><span class="line">            du[c]++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - M + <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> pay[i];</span><br><span class="line">    }</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = M; j >= <span class="number">0</span>; j--) {</span><br><span class="line">        <span class="keyword">if</span> (dp[<span class="number">1</span>][j] >= <span class="number">0</span>) {</span><br><span class="line">            <span class="built_in">cout</span> << j << <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常规题&quot;&gt;&lt;a href=&quot;#常规题&quot; class=&quot;headerlink&quot; title=&quot;常规题&quot;&gt;&lt;/a&gt;常规题&lt;/h2&gt;&lt;h3 id=&quot;1、P1216-IOI1994-USACO1-5-数字三角形-Number-Triangles&quot;&gt;&lt;a href=&quot;#1、
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="树形dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
      <category term="悬线法" scheme="http://yoursite.com/tags/%E6%82%AC%E7%BA%BF%E6%B3%95/"/>
    
      <category term="Dilworth定理" scheme="http://yoursite.com/tags/Dilworth%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.06</title>
    <link href="http://yoursite.com/2019/05/06/Algorithm0506/"/>
    <id>http://yoursite.com/2019/05/06/Algorithm0506/</id>
    <published>2019-05-06T10:32:45.766Z</published>
    <updated>2019-05-06T10:51:42.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规题"><a href="#常规题" class="headerlink" title="常规题"></a>常规题</h2><h3 id="1、P1057-传球游戏"><a href="#1、P1057-传球游戏" class="headerlink" title="1、P1057 传球游戏"></a><a href="https://www.luogu.org/problemnew/show/P1057" target="_blank" rel="noopener">1、P1057 传球游戏</a></h3><p>R:水题，思路很好想。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">35</span>][<span class="number">35</span>], N, M;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> > N) {</span><br><span class="line">                tmp += dp[<span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                tmp += dp[j + <span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (j - <span class="number">1</span> < <span class="number">1</span>) {</span><br><span class="line">                tmp += dp[N][i - <span class="number">1</span>];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                tmp += dp[j - <span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            dp[j][i] = tmp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << dp[<span class="number">1</span>][M] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、P1077-摆花"><a href="#2、P1077-摆花" class="headerlink" title="2、P1077 摆花"></a><a href="https://www.luogu.org/problemnew/show/P1077" target="_blank" rel="noopener">2、P1077 摆花</a></h3><p>R:水题，思路很好想，我天天只会刷水题，其他的题都不会。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000007</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, dp[<span class="number">105</span>], f[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> f[i];</span><br><span class="line">    }</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = M; j >= <span class="number">0</span>; j--) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k <= f[i] && j - k >= <span class="number">0</span>; k++) {</span><br><span class="line">                dp[j] = (dp[j - k] + dp[j]) % mod;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << dp[M] << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、P1115-最大子段和"><a href="#3、P1115-最大子段和" class="headerlink" title="3、P1115 最大子段和"></a><a href="https://www.luogu.org/problemnew/show/P1115" target="_blank" rel="noopener">3、P1115 最大子段和</a></h3><p>R:裸的最大子段和，很简单。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200000</span> + <span class="number">10</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[maxn], f[maxn], ans = -inf;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> f[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        dp[i] = max(dp[i - <span class="number">1</span>] + f[i], f[i]);</span><br><span class="line">        ans = max(ans, dp[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、P1130-红牌"><a href="#4、P1130-红牌" class="headerlink" title="4、P1130 红牌"></a><a href="https://www.luogu.org/problemnew/show/P1130" target="_blank" rel="noopener">4、P1130 红牌</a></h3><p>R:水</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn], chess[maxn][maxn], N, M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= N; j++) {</span><br><span class="line">            <span class="built_in">cin</span> >> chess[i][j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= M; j++) {</span><br><span class="line">            <span class="keyword">int</span> tmp = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (j - <span class="number">1</span> == <span class="number">0</span>) {</span><br><span class="line">                tmp = min(dp[i - <span class="number">1</span>][M], tmp);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                tmp = min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], tmp);</span><br><span class="line">            }</span><br><span class="line">            tmp += chess[j][i];</span><br><span class="line">            dp[i][j] = tmp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        ans = min(ans, dp[N][i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="错题"><a href="#错题" class="headerlink" title="错题"></a>错题</h2><h3 id="5、P1103-书本整理"><a href="#5、P1103-书本整理" class="headerlink" title="5、P1103 书本整理"></a><a href="https://www.luogu.org/problemnew/show/P1103" target="_blank" rel="noopener">5、P1103 书本整理</a></h3><p>R:dp[i][k]表示前i个删除k个，前必须保留i的最小不整齐度。dp[i][k] = min(dp[j][k-(i-j-1)]+abs(w[i]-w[j]),注意细节:dp[i][i-1] = 0</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">105</span>][<span class="number">105</span>], N, K, ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> h, w;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node& a, <span class="keyword">const</span> Node& b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a.h < b.h;</span><br><span class="line">}</span><br><span class="line">Node nodes[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Abs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> x > <span class="number">0</span> ? x : -x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a > b ? b : a;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N >> K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> nodes[i].h >> nodes[i].w;</span><br><span class="line">    }</span><br><span class="line">    sort(nodes + <span class="number">1</span>, nodes + <span class="number">1</span> + N, cmp);</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j <= K; j++) {</span><br><span class="line">            <span class="comment">//前i个取走j个，而且第i个必须留下。</span></span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> < j) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> == j) {</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k >= <span class="number">1</span>; k--) {</span><br><span class="line">                <span class="keyword">if</span> (k > j - (i - k - <span class="number">1</span>) && j - (i - k - <span class="number">1</span>) >= <span class="number">0</span>) {</span><br><span class="line">                    dp[i][j] = Min(dp[i][j], dp[k][j - (i - k - <span class="number">1</span>)] + Abs(nodes[i].w - nodes[k].w));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">if</span> (K - (N - i) >= <span class="number">0</span>) {</span><br><span class="line">            ans = min(dp[i][K - (N - i)], ans);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6、P1108-低价购买"><a href="#6、P1108-低价购买" class="headerlink" title="6、P1108 低价购买"></a><a href="https://www.luogu.org/problemnew/show/P1108" target="_blank" rel="noopener">6、P1108 低价购买</a></h3><p>R:N<=5000,求最长下降子序列用O(N^2)算法没有问题。求不重复的方案数：g[i]表示以i结尾的子串方案数，若f[j]+1=f[i]且a[j]>a[i],则g[i] += g[j],若f[j]=1时则g[j]=1,最终统计时将f[i]=mx的g[i]加起来即可。但是这里面有重复的部分，当f[i]==f[j]且a[i]==a[j]时，需要将这部分去掉。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> N, f[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[maxn], g[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> >> N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> f[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//O(N^2)，N小于等于5000没问题</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= i - <span class="number">1</span>; j++) {</span><br><span class="line">            <span class="keyword">if</span> (f[j] > f[i]) {</span><br><span class="line">                dp[i] = max(dp[j] + <span class="number">1</span>, dp[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == <span class="number">1</span>) {</span><br><span class="line">            g[i] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j <= i - <span class="number">1</span>; j++) {</span><br><span class="line">            <span class="keyword">if</span> (dp[j] == dp[i] && f[j] == f[i]) {</span><br><span class="line">                g[j] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (dp[j] + <span class="number">1</span> == dp[i] && f[j] > f[i]) {</span><br><span class="line">                g[i] += g[j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>, mx = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        mx = max(dp[i], mx);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == mx) {</span><br><span class="line">            ans += g[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> << mx << <span class="string">" "</span> << ans << <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常规题&quot;&gt;&lt;a href=&quot;#常规题&quot; class=&quot;headerlink&quot; title=&quot;常规题&quot;&gt;&lt;/a&gt;常规题&lt;/h2&gt;&lt;h3 id=&quot;1、P1057-传球游戏&quot;&gt;&lt;a href=&quot;#1、P1057-传球游戏&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.02</title>
    <link href="http://yoursite.com/2019/05/02/Algorithm0502/"/>
    <id>http://yoursite.com/2019/05/02/Algorithm0502/</id>
    <published>2019-05-02T04:01:40.078Z</published>
    <updated>2019-05-02T13:12:31.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h2><h3 id="P3834-【模板】可持久化线段树-1（主席树）"><a href="#P3834-【模板】可持久化线段树-1（主席树）" class="headerlink" title="P3834 【模板】可持久化线段树 1（主席树）"></a><a href="https://www.luogu.org/problemnew/show/P3834" target="_blank" rel="noopener">P3834 【模板】可持久化线段树 1（主席树）</a></h3><p>R:求区间第k大，主席树方法，注意离散化的方法，以及二分查找。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> root[maxn], N, Q, f[maxn], cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> l, r, sum;</span><br><span class="line">};</span><br><span class="line">Node T[maxn * <span class="number">40</span>];</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> lower_bound(v.begin(), v.end(), x) - v.begin() + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) {</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) {</span><br><span class="line">        r = <span class="number">10</span> * r + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f * r;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>& x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    T[++cnt] = T[y], x = cnt;</span><br><span class="line">    T[cnt].sum += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos <= mid) {</span><br><span class="line">        update(pos, l, mid, T[x].l, T[y].l);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        update(pos, mid + <span class="number">1</span>, r, T[x].r, T[y].r);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l == r) {</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> sum = T[T[y].l].sum - T[T[x].l].sum;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum >= k) {</span><br><span class="line">        <span class="keyword">return</span> query(l, mid, T[x].l, T[y].l, k);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> query(mid + <span class="number">1</span>, r, T[x].r, T[y].r, k - sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    N = read(), Q = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        f[i] = read();</span><br><span class="line">        v.push_back(f[i]);</span><br><span class="line">    }</span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line">    v.erase(unique(v.begin(), v.end()), v.end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="keyword">int</span> id = getid(f[i]);</span><br><span class="line">        update(id, <span class="number">1</span>, N, root[i], root[i - <span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= Q; i++) {</span><br><span class="line">        <span class="keyword">int</span> x, y, k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &x, &y, &k);</span><br><span class="line">        <span class="keyword">int</span> q = query(<span class="number">1</span>, N, root[x - <span class="number">1</span>], root[y], k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, v[q - <span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P3372-【模板】线段树-1"><a href="#P3372-【模板】线段树-1" class="headerlink" title="P3372 【模板】线段树 1"></a><a href="https://www.luogu.org/problemnew/show/P3834" target="_blank" rel="noopener">P3372 【模板】线段树 1</a></h3><p>R:线段树区间更新，模板题</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> seg[maxn * <span class="number">4</span>], add[maxn * <span class="number">4</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[maxn], N, M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l == r) {</span><br><span class="line">        seg[cur] = f[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    build(l, mid, cur << <span class="number">1</span>);</span><br><span class="line">    build(mid + <span class="number">1</span>, r, cur << <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    seg[cur] = seg[cur << <span class="number">1</span>] + seg[cur << <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (add[cur]) {</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        seg[cur << <span class="number">1</span>] += (mid - l + <span class="number">1</span>) * add[cur];</span><br><span class="line">        seg[cur << <span class="number">1</span> | <span class="number">1</span>] += (r - mid) * add[cur];</span><br><span class="line">        add[cur << <span class="number">1</span>] += add[cur];</span><br><span class="line">        add[cur << <span class="number">1</span> | <span class="number">1</span>] += add[cur];</span><br><span class="line">        add[cur] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l >= L && r <= R) {</span><br><span class="line">        add[cur] += k;</span><br><span class="line">        seg[cur] += k * (r - l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    pushdown(l, r, cur);</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid >= L) {</span><br><span class="line">        update(L, R, l, mid, k, cur << <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (mid < R) {</span><br><span class="line">        update(L, R, mid + <span class="number">1</span>, r, k, cur << <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    seg[cur] = seg[cur << <span class="number">1</span>] + seg[cur << <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l >= L && r <= R) {</span><br><span class="line">        <span class="keyword">return</span> seg[cur];</span><br><span class="line">    }</span><br><span class="line">    pushdown(l, r, cur);</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid >= L) {</span><br><span class="line">        sum += query(L, R, l, mid, cur << <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (mid < R) {</span><br><span class="line">        sum += query(L, R, mid + <span class="number">1</span>, r, cur << <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= N; i++) {</span><br><span class="line">        <span class="built_in">cin</span> >> f[i];</span><br><span class="line">    }</span><br><span class="line">    build(<span class="number">1</span>, N, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">int</span> w, x, y, k;</span><br><span class="line">        <span class="built_in">cin</span> >> w >> x >> y;</span><br><span class="line">        <span class="keyword">if</span> (w == <span class="number">1</span>) {</span><br><span class="line">            <span class="built_in">cin</span> >> k;</span><br><span class="line">            update(x, y, <span class="number">1</span>, N, k, <span class="number">1</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> q = query(x, y, <span class="number">1</span>, N, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">cout</span> << q << <span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="P3919-【模板】可持久化数组（可持久化线段树-平衡树）"><a href="#P3919-【模板】可持久化数组（可持久化线段树-平衡树）" class="headerlink" title="P3919 【模板】可持久化数组（可持久化线段树/平衡树）"></a><a href="https://www.luogu.org/problemnew/show/P3919" target="_blank" rel="noopener">P3919 【模板】可持久化数组（可持久化线段树/平衡树）</a></h3><p>R:主席树,注意回溯时全局变量的变化，尤其是build那里。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> root[maxn], cnt, N, M;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> l, r, v;</span><br><span class="line">};</span><br><span class="line">Node T[maxn * <span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>& x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//注意这里cnt是全局变量，回溯时会改变，所以不能用T[cnt],要用T[x]</span></span><br><span class="line">    x = ++cnt;</span><br><span class="line">    <span class="keyword">if</span> (l == r) {</span><br><span class="line">        <span class="built_in">cin</span> >> T[x].v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    build(l, mid, T[x].l);</span><br><span class="line">    build(mid + <span class="number">1</span>, r, T[x].r);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>& x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    T[++cnt] = T[y], x = cnt;</span><br><span class="line">    <span class="keyword">if</span> (l == r) {</span><br><span class="line">        T[x].v = v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos <= mid) {</span><br><span class="line">        update(pos, v, l, mid, T[x].l, T[y].l);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        update(pos, v, mid + <span class="number">1</span>, r, T[x].r, T[y].r);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l == r) {</span><br><span class="line">        <span class="keyword">return</span> T[cur].v;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos <= mid) {</span><br><span class="line">        <span class="keyword">return</span> query(pos, l, mid, T[cur].l);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> query(pos, mid + <span class="number">1</span>, r, T[cur].r);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> >> N >> M;</span><br><span class="line">    build(<span class="number">1</span>, N, root[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">int</span> v, w, loc, u;</span><br><span class="line">        <span class="built_in">cin</span> >> v >> w >> loc;</span><br><span class="line">        <span class="keyword">if</span> (w == <span class="number">1</span>) {</span><br><span class="line">            <span class="built_in">cin</span> >> u;</span><br><span class="line">            update(loc, u, <span class="number">1</span>, N, root[i], root[v]);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            root[i] = root[v];</span><br><span class="line">            <span class="keyword">int</span> q = query(loc, <span class="number">1</span>, N, root[i]);</span><br><span class="line">            <span class="built_in">cout</span> << q << <span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="常规题"><a href="#常规题" class="headerlink" title="常规题"></a>常规题</h2><h3 id="P1816-忠诚"><a href="#P1816-忠诚" class="headerlink" title="P1816 忠诚"></a><a href="https://www.luogu.org/problemnew/show/P1816" target="_blank" rel="noopener">P1816 忠诚</a></h3><p>R:简单的线段树应用，水。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, cnt, root;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> l, r, mn;</span><br><span class="line">};</span><br><span class="line">Node T[maxn << <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>& x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    x = ++cnt;</span><br><span class="line">    <span class="keyword">if</span> (l == r) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &T[x].mn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    build(l, mid, T[x].l);</span><br><span class="line">    build(mid + <span class="number">1</span>, r, T[x].r);</span><br><span class="line">    T[x].mn = min(T[T[x].l].mn, T[T[x].r].mn);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l >= L && r <= R) {</span><br><span class="line">        <span class="keyword">return</span> T[cur].mn;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) >> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mn = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid >= L) {</span><br><span class="line">        mn = min(query(L, R, l, mid, T[cur].l), mn);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (mid < R) {</span><br><span class="line">        mn = min(query(L, R, mid + <span class="number">1</span>, r, T[cur].r), mn);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> mn;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &N, &M);</span><br><span class="line">    build(<span class="number">1</span>, N, root);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i <= M; i++) {</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &x, &y);</span><br><span class="line">        <span class="keyword">int</span> q = query(x, y, <span class="number">1</span>, N, root);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, q);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模板题&quot;&gt;&lt;a href=&quot;#模板题&quot; class=&quot;headerlink&quot; title=&quot;模板题&quot;&gt;&lt;/a&gt;模板题&lt;/h2&gt;&lt;h3 id=&quot;P3834-【模板】可持久化线段树-1（主席树）&quot;&gt;&lt;a href=&quot;#P3834-【模板】可持久化线段树-1（主席树）&quot;
      
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="主席树" scheme="http://yoursite.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Konjak Record——2019.05.01</title>
    <link href="http://yoursite.com/2019/05/01/Algorithm0501/"/>
    <id>http://yoursite.com/2019/05/01/Algorithm0501/</id>
    <published>2019-05-01T02:52:51.729Z</published>
    <updated>2019-05-01T11:13:20.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规题"><a href="#常规题" class="headerlink" title="常规题"></a>常规题</h2><h3 id="1、P1177-【模板】快速排序"><a href="#1、P1177-【模板】快速排序" class="headerlink" title="1、P1177 【模板】快速排序"></a><a href="https://www.luogu.org/problemnew/show/P1177" target="_blank" rel="noopener">1、P1177 【模板】快速排序</a></h3><p>分析：要求写快速排序，我很懒，就直接调用了sort函数(其实是不会)。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn],N;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N ; i++){</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&f[i]);</span><br><span class="line">    }</span><br><span class="line">    sort(f+<span class="number">1</span>,f+<span class="number">1</span>+N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N ; i++){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,f[i]);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h3 id="2、P1059-明明的随机数"><a href="#2、P1059-明明的随机数" class="headerlink" title="2、P1059 明明的随机数"></a><a href="https://www.luogu.org/problemnew/show/P1059" target="_blank" rel="noopener">2、P1059 明明的随机数</a></h3><p>分析：水</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cache[<span class="number">1001</span>],N;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N ; i++){</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&tmp);</span><br><span class="line">        cache[tmp]++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= <span class="number">1000</span> ; i++){</span><br><span class="line">        <span class="keyword">if</span>(cache[i])sum++;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= <span class="number">1000</span> ; i++){</span><br><span class="line">        <span class="keyword">if</span>(cache[i])<span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、P1068-分数线划定"><a href="#3、P1068-分数线划定" class="headerlink" title="3、P1068 分数线划定"></a><a href="https://www.luogu.org/problemnew/show/P1068" target="_blank" rel="noopener">3、P1068 分数线划定</a></h3><p>分析：水,题意不清，语文不好看不懂。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> score,id;</span><br><span class="line">};</span><br><span class="line">Node nodes[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node &a, <span class="keyword">const</span> Node &b)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(a.score == b.score){</span><br><span class="line">        <span class="keyword">return</span> a.id < b.id;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> a.score > b.score;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&N, &M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N ; i++){</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &nodes[i].id, &nodes[i].score);</span><br><span class="line">    }</span><br><span class="line">    M = <span class="keyword">int</span>(M*<span class="number">1.5</span>);</span><br><span class="line">    sort(nodes+<span class="number">1</span>,nodes+<span class="number">1</span>+N,cmp);</span><br><span class="line">    <span class="keyword">int</span> score = nodes[M].score,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N ; i++){</span><br><span class="line">        <span class="keyword">if</span>(nodes[i].score>=score){</span><br><span class="line">            sum++;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,score,sum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N ; i++){</span><br><span class="line">        <span class="keyword">if</span>(nodes[i].score>=score){</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,nodes[i].id,nodes[i].score);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、P1583-魔法照片"><a href="#4、P1583-魔法照片" class="headerlink" title="4、P1583 魔法照片"></a><a href="https://www.luogu.org/problemnew/show/P1583" target="_blank" rel="noopener">4、P1583 魔法照片</a></h3><p>分析：水</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> id,w;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> N,K,E[<span class="number">11</span>];</span><br><span class="line">Node nodes[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node&a,<span class="keyword">const</span> Node&b)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(a.w==b.w)<span class="keyword">return</span> a.id < b.id;</span><br><span class="line">    <span class="keyword">return</span> a.w>b.w;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>>>N>>K;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= <span class="number">10</span> ; i++){</span><br><span class="line">        <span class="built_in">cin</span>>>E[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i<=N;i++){</span><br><span class="line">        <span class="built_in">cin</span>>>nodes[i].w;</span><br><span class="line">        nodes[i].id=i;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    sort(nodes+<span class="number">1</span>,nodes+<span class="number">1</span>+N,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N ; i++){</span><br><span class="line">        nodes[i].w += E[(i<span class="number">-1</span>)%<span class="number">10</span>+<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    sort(nodes+<span class="number">1</span>,nodes+<span class="number">1</span>+N,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ;i <=K;i++){</span><br><span class="line">        <span class="built_in">cout</span><<nodes[i].id<<<span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5、P1051-谁拿了最多奖学金"><a href="#5、P1051-谁拿了最多奖学金" class="headerlink" title="5、P1051 谁拿了最多奖学金"></a><a href="https://www.luogu.org/problemnew/show/P1051" target="_blank" rel="noopener">5、P1051 谁拿了最多奖学金</a></h3><p>分析：水</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">string</span> mx=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> sm = <span class="number">0</span>,N,total=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>>>N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i<=N;i++){</span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">int</span> self,shits,shitSci;</span><br><span class="line">        <span class="keyword">char</span> w,shitLeader;</span><br><span class="line">        <span class="built_in">cin</span>>>name>>self>>shits>>shitLeader>>w>>shitSci;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(self><span class="number">80</span>&&shitSci>=<span class="number">1</span>){</span><br><span class="line">            tmp+=<span class="number">8000</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(self><span class="number">85</span>&&shits><span class="number">80</span>){</span><br><span class="line">            tmp+=<span class="number">4000</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(self><span class="number">90</span>){</span><br><span class="line">            tmp+=<span class="number">2000</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(w==<span class="string">'Y'</span>&&self><span class="number">85</span>){</span><br><span class="line">            tmp+=<span class="number">1000</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(shitLeader==<span class="string">'Y'</span>&&shits > <span class="number">80</span>){</span><br><span class="line">            tmp+=<span class="number">850</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(tmp>sm){</span><br><span class="line">            sm=tmp,mx=name;</span><br><span class="line">        }</span><br><span class="line">        total += tmp;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span><<mx<<<span class="built_in">endl</span><<sm<<<span class="built_in">endl</span><<total<<<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6、P1093-奖学金"><a href="#6、P1093-奖学金" class="headerlink" title="6、P1093 奖学金"></a><a href="https://www.luogu.org/problemnew/show/P1093" target="_blank" rel="noopener">6、P1093 奖学金</a></h3><p>分析：水</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> chinese,math,english,id,sum;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node&a,<span class="keyword">const</span> Node&b)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(a.sum==b.sum){</span><br><span class="line">        <span class="keyword">if</span>(a.chinese==b.chinese){</span><br><span class="line">            <span class="keyword">return</span> a.id<b.id;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> a.chinese>b.chinese;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> a.sum>b.sum;</span><br><span class="line">}</span><br><span class="line">Node nodes[<span class="number">305</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N ; i++){</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&nodes[i].chinese,&nodes[i].math,&nodes[i].english);</span><br><span class="line">        nodes[i].id=i;</span><br><span class="line">        nodes[i].sum = nodes[i].chinese+nodes[i].math+nodes[i].english;</span><br><span class="line">    }</span><br><span class="line">    sort(nodes+<span class="number">1</span>,nodes+<span class="number">1</span>+N,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span> ; i<=<span class="number">5</span>;i++){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,nodes[i].id,nodes[i].sum);</span><br><span class="line">    }</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="错题"><a href="#错题" class="headerlink" title="错题"></a>错题</h2><h3 id="7、P1309-瑞士轮"><a href="#7、P1309-瑞士轮" class="headerlink" title="7、P1309 瑞士轮"></a><a href="https://www.luogu.org/problemnew/show/P1309" target="_blank" rel="noopener">7、P1309 瑞士轮</a></h3><p>分析：两个有序数组归并的复杂度为O(N),如果直接排序复杂度为O(NlogN)。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N,R,Q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> score,id,ability;</span><br><span class="line">};</span><br><span class="line">Node nodes[<span class="number">200000</span>+<span class="number">10</span>],n1[<span class="number">100000</span>+<span class="number">10</span>],n2[<span class="number">100000</span>+<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node&a,<span class="keyword">const</span> Node&b)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(a.score==b.score){</span><br><span class="line">        <span class="keyword">return</span> a.id<b.id;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> a.score>b.score;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ssort</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N; i+=<span class="number">2</span>){</span><br><span class="line">        <span class="keyword">if</span>(nodes[i].ability > nodes[i+<span class="number">1</span>].ability){</span><br><span class="line">            nodes[i].score+=<span class="number">1</span>;</span><br><span class="line">            n1[flag] = nodes[i],n2[flag] = nodes[i+<span class="number">1</span>];</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            nodes[i+<span class="number">1</span>].score+=<span class="number">1</span>;</span><br><span class="line">            n2[flag] = nodes[i],n1[flag] = nodes[i+<span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        flag++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> f1=<span class="number">1</span>,f2=<span class="number">1</span>,pos=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(pos<=N){</span><br><span class="line">        <span class="keyword">if</span>(f1<=N/<span class="number">2</span>&&f2<=N/<span class="number">2</span>){</span><br><span class="line">            <span class="keyword">if</span>(cmp(n1[f1],n2[f2])){</span><br><span class="line">                nodes[pos++] = n1[f1++];</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                nodes[pos++] = n2[f2++];</span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(f1<=N/<span class="number">2</span>){</span><br><span class="line">            nodes[pos++] = n1[f1++];</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            nodes[pos++] = n2[f2++];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">cin</span>>>N>>R>>Q;</span><br><span class="line">    N *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N ; i++){</span><br><span class="line">        <span class="built_in">cin</span>>>nodes[i].score;</span><br><span class="line">        nodes[i].id = i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N ; i++){</span><br><span class="line">        <span class="built_in">cin</span>>>nodes[i].ability;</span><br><span class="line">    }</span><br><span class="line">    sort(nodes+<span class="number">1</span>,nodes+<span class="number">1</span>+N,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= R ; i++){</span><br><span class="line">        ssort();</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span><<nodes[Q].id<<<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="8、P1781-宇宙总统"><a href="#8、P1781-宇宙总统" class="headerlink" title="8、P1781 宇宙总统"></a><a href="https://www.luogu.org/problemnew/show/P1781" target="_blank" rel="noopener">8、P1781 宇宙总统</a></h3><p>分析：大数比较，用字符串，如果字符串长度相同，则按照字典序，反之越长越大。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><bits/stdc++.h></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span>>>N;</span><br><span class="line">    <span class="built_in">string</span> mx = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> id=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i <= N ; i++){</span><br><span class="line">        <span class="built_in">string</span> in;</span><br><span class="line">        <span class="built_in">cin</span>>>in;</span><br><span class="line">        <span class="keyword">if</span>(in.size()>mx.size()){</span><br><span class="line">            mx = in,id=i;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">if</span>(in.size()==mx.size()&&in>mx){</span><br><span class="line">                mx = in,id=i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span><<id<<<span class="built_in">endl</span><<mx<<<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常规题&quot;&gt;&lt;a href=&quot;#常规题&quot; class=&quot;headerlink&quot; title=&quot;常规题&quot;&gt;&lt;/a&gt;常规题&lt;/h2&gt;&lt;h3 id=&quot;1、P1177-【模板】快速排序&quot;&gt;&lt;a href=&quot;#1、P1177-【模板】快速排序&quot; class=&quot;headerlink&quot; title=&quot;1、P1177 【模板】快速排序&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1177&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1、P1177 【模板】快速排序&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;分析：要求写快速排序，我很懒，就直接调用了sort函数(其实是不会)。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&lt;bits/stdc++.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxn = &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; f[maxn],N;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;N);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ; i &lt;= N ; i++){&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;f[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sort(f+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,f+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+N);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ; i &lt;= N ; i++){&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d &quot;&lt;/span&gt;,f[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    system(&lt;span class=&quot;string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Konjak Records" scheme="http://yoursite.com/categories/Konjak-Records/"/>
    
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
